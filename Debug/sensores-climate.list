
sensores-climate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004aac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004c40  08004c40  00005c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d20  08004d20  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004d20  08004d20  00005d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d28  08004d28  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d28  08004d28  00005d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d2c  08004d2c  00005d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004d30  00006000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000214  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000691f  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ad4  00000000  00000000  0000c9b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000860  00000000  00000000  0000e490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000609  00000000  00000000  0000ecf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017418  00000000  00000000  0000f2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000833b  00000000  00000000  00026711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075ff4  00000000  00000000  0002ea4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a4a40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ab8  00000000  00000000  000a4a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000a753c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c24 	.word	0x08004c24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004c24 	.word	0x08004c24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	db0b      	blt.n	8000c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f003 021f 	and.w	r2, r3, #31
 8000c1c:	4907      	ldr	r1, [pc, #28]	@ (8000c3c <__NVIC_EnableIRQ+0x38>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	095b      	lsrs	r3, r3, #5
 8000c24:	2001      	movs	r0, #1
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000e100 	.word	0xe000e100

08000c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db0a      	blt.n	8000c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	490c      	ldr	r1, [pc, #48]	@ (8000c8c <__NVIC_SetPriority+0x4c>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	0112      	lsls	r2, r2, #4
 8000c60:	b2d2      	uxtb	r2, r2
 8000c62:	440b      	add	r3, r1
 8000c64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c68:	e00a      	b.n	8000c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4908      	ldr	r1, [pc, #32]	@ (8000c90 <__NVIC_SetPriority+0x50>)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	3b04      	subs	r3, #4
 8000c78:	0112      	lsls	r2, r2, #4
 8000c7a:	b2d2      	uxtb	r2, r2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	761a      	strb	r2, [r3, #24]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b089      	sub	sp, #36	@ 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f1c3 0307 	rsb	r3, r3, #7
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	bf28      	it	cs
 8000cb2:	2304      	movcs	r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	2b06      	cmp	r3, #6
 8000cbc:	d902      	bls.n	8000cc4 <NVIC_EncodePriority+0x30>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3b03      	subs	r3, #3
 8000cc2:	e000      	b.n	8000cc6 <NVIC_EncodePriority+0x32>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43da      	mvns	r2, r3
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43d9      	mvns	r1, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	4313      	orrs	r3, r2
         );
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3724      	adds	r7, #36	@ 0x24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000d04:	4b08      	ldr	r3, [pc, #32]	@ (8000d28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d06:	695a      	ldr	r2, [r3, #20]
 8000d08:	4907      	ldr	r1, [pc, #28]	@ (8000d28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d10:	4b05      	ldr	r3, [pc, #20]	@ (8000d28 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d12:	695a      	ldr	r2, [r3, #20]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4013      	ands	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	40021000 	.word	0x40021000

08000d2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff ffe3 	bl	8000cfc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d36:	f7ff ff57 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ffa7 	bl	8000c94 <NVIC_EncodePriority>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	2010      	movs	r0, #16
 8000d4c:	f7ff ff78 	bl	8000c40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000d50:	2010      	movs	r0, #16
 8000d52:	f7ff ff57 	bl	8000c04 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d56:	f7ff ff47 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff97 	bl	8000c94 <NVIC_EncodePriority>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4619      	mov	r1, r3
 8000d6a:	2011      	movs	r0, #17
 8000d6c:	f7ff ff68 	bl	8000c40 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000d70:	2011      	movs	r0, #17
 8000d72:	f7ff ff47 	bl	8000c04 <__NVIC_EnableIRQ>

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <LL_AHB1_GRP1_EnableClock>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d86:	695a      	ldr	r2, [r3, #20]
 8000d88:	4907      	ldr	r1, [pc, #28]	@ (8000da8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000d90:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d92:	695a      	ldr	r2, [r3, #20]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4013      	ands	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000

08000dac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000db0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000db4:	f7ff ffe2 	bl	8000d7c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000db8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8000dbc:	f7ff ffde 	bl	8000d7c <LL_AHB1_GRP1_EnableClock>

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <__NVIC_GetPriorityGrouping>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	@ (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	@ (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	@ 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	601a      	str	r2, [r3, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000f2a:	f023 0306 	bic.w	r3, r3, #6
 8000f2e:	68b9      	ldr	r1, [r7, #8]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	431a      	orrs	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	60da      	str	r2, [r3, #12]
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60da      	str	r2, [r3, #12]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f043 0204 	orr.w	r2, r3, #4
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f023 0204 	bic.w	r2, r3, #4
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	601a      	str	r2, [r3, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d101      	bne.n	8000fbe <LL_I2C_IsActiveFlag_TXIS+0x18>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	f003 0320 	and.w	r3, r3, #32
 8000fdc:	2b20      	cmp	r3, #32
 8000fde:	d101      	bne.n	8000fe4 <LL_I2C_IsActiveFlag_STOP+0x18>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f043 0220 	orr.w	r2, r3, #32
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	61da      	str	r2, [r3, #28]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	605a      	str	r2, [r3, #4]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800104e:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	041b      	lsls	r3, r3, #16
 8001054:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8001058:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800105e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001060:	4313      	orrs	r3, r2
 8001062:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001066:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106e:	0d5b      	lsrs	r3, r3, #21
 8001070:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <LL_I2C_HandleTransfer+0x5c>)
 8001076:	430b      	orrs	r3, r1
 8001078:	43db      	mvns	r3, r3
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	431a      	orrs	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8001084:	bf00      	nop
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	03ff7bff 	.word	0x03ff7bff

08001094 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010a0:	b2db      	uxtb	r3, r3
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	460b      	mov	r3, r1
 80010b8:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80010ba:	78fa      	ldrb	r2, [r7, #3]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <LL_AHB1_GRP1_EnableClock>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80010d4:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010d6:	695a      	ldr	r2, [r3, #20]
 80010d8:	4907      	ldr	r1, [pc, #28]	@ (80010f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4313      	orrs	r3, r2
 80010de:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4013      	ands	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000

080010fc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001104:	4b08      	ldr	r3, [pc, #32]	@ (8001128 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001106:	69da      	ldr	r2, [r3, #28]
 8001108:	4907      	ldr	r1, [pc, #28]	@ (8001128 <LL_APB1_GRP1_EnableClock+0x2c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4313      	orrs	r3, r2
 800110e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001112:	69da      	ldr	r2, [r3, #28]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4013      	ands	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40021000 	.word	0x40021000

0800112c <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	@ 0x38
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]
 8001142:	615a      	str	r2, [r3, #20]
 8001144:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001156:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800115a:	f7ff ffb7 	bl	80010cc <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800115e:	23c0      	movs	r3, #192	@ 0xc0
 8001160:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001162:	2302      	movs	r3, #2
 8001164:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800116a:	2301      	movs	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001172:	2304      	movs	r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4820      	ldr	r0, [pc, #128]	@ (80011fc <MX_I2C1_Init+0xd0>)
 800117c:	f001 fae2 	bl	8002744 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001180:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001184:	f7ff ffba 	bl	80010fc <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001188:	f7ff fe1c 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 800118c:	4603      	mov	r3, r0
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fe6c 	bl	8000e70 <NVIC_EncodePriority>
 8001198:	4603      	mov	r3, r0
 800119a:	4619      	mov	r1, r3
 800119c:	201f      	movs	r0, #31
 800119e:	f7ff fe3d 	bl	8000e1c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011a2:	201f      	movs	r0, #31
 80011a4:	f7ff fe1c 	bl	8000de0 <__NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80011a8:	4815      	ldr	r0, [pc, #84]	@ (8001200 <MX_I2C1_Init+0xd4>)
 80011aa:	f7ff ff32 	bl	8001012 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80011ae:	4814      	ldr	r0, [pc, #80]	@ (8001200 <MX_I2C1_Init+0xd4>)
 80011b0:	f7ff fec9 	bl	8000f46 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80011b4:	4812      	ldr	r0, [pc, #72]	@ (8001200 <MX_I2C1_Init+0xd4>)
 80011b6:	f7ff fe9e 	bl	8000ef6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80011ba:	4811      	ldr	r0, [pc, #68]	@ (8001200 <MX_I2C1_Init+0xd4>)
 80011bc:	f7ff fe8b 	bl	8000ed6 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <MX_I2C1_Init+0xd8>)
 80011c6:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80011d8:	2300      	movs	r3, #0
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	4807      	ldr	r0, [pc, #28]	@ (8001200 <MX_I2C1_Init+0xd4>)
 80011e4:	f001 fbc1 	bl	800296a <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	4804      	ldr	r0, [pc, #16]	@ (8001200 <MX_I2C1_Init+0xd4>)
 80011ee:	f7ff fe92 	bl	8000f16 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3738      	adds	r7, #56	@ 0x38
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	48000400 	.word	0x48000400
 8001200:	40005400 	.word	0x40005400
 8001204:	2000090e 	.word	0x2000090e

08001208 <i2c_master_write_multi>:

/* USER CODE BEGIN 1 */
void i2c_master_write_multi(uint8_t* data, size_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af02      	add	r7, sp, #8
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	460b      	mov	r3, r1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	4613      	mov	r3, r2
 800121c:	71bb      	strb	r3, [r7, #6]
    if (read_flag) {
 800121e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <i2c_master_write_multi+0x26>
        register_addr |= (1 << 7);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800122c:	71fb      	strb	r3, [r7, #7]
    }
    LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1 + length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 800122e:	79b9      	ldrb	r1, [r7, #6]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3301      	adds	r3, #1
 8001234:	4a18      	ldr	r2, [pc, #96]	@ (8001298 <i2c_master_write_multi+0x90>)
 8001236:	9201      	str	r2, [sp, #4]
 8001238:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800123c:	9200      	str	r2, [sp, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	4816      	ldr	r0, [pc, #88]	@ (800129c <i2c_master_write_multi+0x94>)
 8001242:	f7ff fef7 	bl	8001034 <LL_I2C_HandleTransfer>
    LL_I2C_TransmitData8(I2C1, register_addr);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4619      	mov	r1, r3
 800124a:	4814      	ldr	r0, [pc, #80]	@ (800129c <i2c_master_write_multi+0x94>)
 800124c:	f7ff ff2f 	bl	80010ae <LL_I2C_TransmitData8>

    size_t dataIndex = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
    while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {
 8001254:	e013      	b.n	800127e <i2c_master_write_multi+0x76>
        if (LL_I2C_IsActiveFlag_TXIS(I2C1)) {
 8001256:	4811      	ldr	r0, [pc, #68]	@ (800129c <i2c_master_write_multi+0x94>)
 8001258:	f7ff fea5 	bl	8000fa6 <LL_I2C_IsActiveFlag_TXIS>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00d      	beq.n	800127e <i2c_master_write_multi+0x76>
            if (dataIndex < length) {
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	429a      	cmp	r2, r3
 8001268:	d209      	bcs.n	800127e <i2c_master_write_multi+0x76>
                LL_I2C_TransmitData8(I2C1, data[dataIndex++]);
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	617a      	str	r2, [r7, #20]
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	4808      	ldr	r0, [pc, #32]	@ (800129c <i2c_master_write_multi+0x94>)
 800127a:	f7ff ff18 	bl	80010ae <LL_I2C_TransmitData8>
    while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {
 800127e:	4807      	ldr	r0, [pc, #28]	@ (800129c <i2c_master_write_multi+0x94>)
 8001280:	f7ff fea4 	bl	8000fcc <LL_I2C_IsActiveFlag_STOP>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0e5      	beq.n	8001256 <i2c_master_write_multi+0x4e>
            }
        }
    }
    LL_I2C_ClearFlag_STOP(I2C1);
 800128a:	4804      	ldr	r0, [pc, #16]	@ (800129c <i2c_master_write_multi+0x94>)
 800128c:	f7ff feb1 	bl	8000ff2 <LL_I2C_ClearFlag_STOP>
}
 8001290:	bf00      	nop
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	80002000 	.word	0x80002000
 800129c:	40005400 	.word	0x40005400

080012a0 <i2c_master_read>:

uint8_t* i2c_master_read(uint8_t *buffer, uint8_t length, uint8_t register_addr,
		uint8_t slave_addr, uint8_t read_flag) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	4608      	mov	r0, r1
 80012aa:	4611      	mov	r1, r2
 80012ac:	461a      	mov	r2, r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	70fb      	strb	r3, [r7, #3]
 80012b2:	460b      	mov	r3, r1
 80012b4:	70bb      	strb	r3, [r7, #2]
 80012b6:	4613      	mov	r3, r2
 80012b8:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 80012ba:	4a30      	ldr	r2, [pc, #192]	@ (800137c <i2c_master_read+0xdc>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6013      	str	r3, [r2, #0]
	if (read_flag) {
 80012c0:	7c3b      	ldrb	r3, [r7, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <i2c_master_read+0x2e>
		register_addr |= (1 << 7);
 80012c6:	78bb      	ldrb	r3, [r7, #2]
 80012c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012cc:	70bb      	strb	r3, [r7, #2]
	}
	end_of_read_flag = 0;
 80012ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <i2c_master_read+0xe0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
	LL_I2C_EnableIT_RX(I2C1);
 80012d4:	482b      	ldr	r0, [pc, #172]	@ (8001384 <i2c_master_read+0xe4>)
 80012d6:	f7ff fe46 	bl	8000f66 <LL_I2C_EnableIT_RX>

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1,
 80012da:	7879      	ldrb	r1, [r7, #1]
 80012dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <i2c_master_read+0xe8>)
 80012de:	9301      	str	r3, [sp, #4]
 80012e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	2200      	movs	r2, #0
 80012ea:	4826      	ldr	r0, [pc, #152]	@ (8001384 <i2c_master_read+0xe4>)
 80012ec:	f7ff fea2 	bl	8001034 <LL_I2C_HandleTransfer>
			LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
	while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {
 80012f0:	e00a      	b.n	8001308 <i2c_master_read+0x68>
		if (LL_I2C_IsActiveFlag_TXIS(I2C1)) {
 80012f2:	4824      	ldr	r0, [pc, #144]	@ (8001384 <i2c_master_read+0xe4>)
 80012f4:	f7ff fe57 	bl	8000fa6 <LL_I2C_IsActiveFlag_TXIS>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <i2c_master_read+0x68>
			LL_I2C_TransmitData8(I2C1, register_addr);
 80012fe:	78bb      	ldrb	r3, [r7, #2]
 8001300:	4619      	mov	r1, r3
 8001302:	4820      	ldr	r0, [pc, #128]	@ (8001384 <i2c_master_read+0xe4>)
 8001304:	f7ff fed3 	bl	80010ae <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {
 8001308:	481e      	ldr	r0, [pc, #120]	@ (8001384 <i2c_master_read+0xe4>)
 800130a:	f7ff fe5f 	bl	8000fcc <LL_I2C_IsActiveFlag_STOP>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0ee      	beq.n	80012f2 <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001314:	481b      	ldr	r0, [pc, #108]	@ (8001384 <i2c_master_read+0xe4>)
 8001316:	f7ff fe6c 	bl	8000ff2 <LL_I2C_ClearFlag_STOP>
	while (LL_I2C_IsActiveFlag_STOP(I2C1)) {
 800131a:	bf00      	nop
 800131c:	4819      	ldr	r0, [pc, #100]	@ (8001384 <i2c_master_read+0xe4>)
 800131e:	f7ff fe55 	bl	8000fcc <LL_I2C_IsActiveFlag_STOP>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f9      	bne.n	800131c <i2c_master_read+0x7c>
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length,
 8001328:	7879      	ldrb	r1, [r7, #1]
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	4a17      	ldr	r2, [pc, #92]	@ (800138c <i2c_master_read+0xec>)
 800132e:	9201      	str	r2, [sp, #4]
 8001330:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001334:	9200      	str	r2, [sp, #0]
 8001336:	2200      	movs	r2, #0
 8001338:	4812      	ldr	r0, [pc, #72]	@ (8001384 <i2c_master_read+0xe4>)
 800133a:	f7ff fe7b 	bl	8001034 <LL_I2C_HandleTransfer>
			LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
	while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {
 800133e:	bf00      	nop
 8001340:	4810      	ldr	r0, [pc, #64]	@ (8001384 <i2c_master_read+0xe4>)
 8001342:	f7ff fe43 	bl	8000fcc <LL_I2C_IsActiveFlag_STOP>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f9      	beq.n	8001340 <i2c_master_read+0xa0>
	};

	LL_I2C_ClearFlag_STOP(I2C1);
 800134c:	480d      	ldr	r0, [pc, #52]	@ (8001384 <i2c_master_read+0xe4>)
 800134e:	f7ff fe50 	bl	8000ff2 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001352:	480c      	ldr	r0, [pc, #48]	@ (8001384 <i2c_master_read+0xe4>)
 8001354:	f7ff fe17 	bl	8000f86 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001358:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <i2c_master_read+0xe4>)
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <i2c_master_read+0xe4>)
 800135e:	f043 0310 	orr.w	r3, r3, #16
 8001362:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001364:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <i2c_master_read+0xf0>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 800136a:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <i2c_master_read+0xe0>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 8001370:	4b02      	ldr	r3, [pc, #8]	@ (800137c <i2c_master_read+0xdc>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20000084 	.word	0x20000084
 8001380:	20000088 	.word	0x20000088
 8001384:	40005400 	.word	0x40005400
 8001388:	80002000 	.word	0x80002000
 800138c:	80002400 	.word	0x80002400
 8001390:	20000089 	.word	0x20000089

08001394 <I2C1_Master_Reception_Callback>:
void I2C1_Master_Reception_Callback(void) {
 8001394:	b598      	push	{r3, r4, r7, lr}
 8001396:	af00      	add	r7, sp, #0
	aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001398:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <I2C1_Master_Reception_Callback+0x44>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <I2C1_Master_Reception_Callback+0x48>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	1c59      	adds	r1, r3, #1
 80013a4:	b2c8      	uxtb	r0, r1
 80013a6:	490d      	ldr	r1, [pc, #52]	@ (80013dc <I2C1_Master_Reception_Callback+0x48>)
 80013a8:	7008      	strb	r0, [r1, #0]
 80013aa:	18d4      	adds	r4, r2, r3
 80013ac:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <I2C1_Master_Reception_Callback+0x4c>)
 80013ae:	f7ff fe71 	bl	8001094 <LL_I2C_ReceiveData8>
 80013b2:	4603      	mov	r3, r0
 80013b4:	7023      	strb	r3, [r4, #0]
			(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <I2C1_Master_Reception_Callback+0x48>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b13      	cmp	r3, #19
 80013be:	d903      	bls.n	80013c8 <I2C1_Master_Reception_Callback+0x34>
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <I2C1_Master_Reception_Callback+0x48>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	e001      	b.n	80013cc <I2C1_Master_Reception_Callback+0x38>
 80013c8:	4b04      	ldr	r3, [pc, #16]	@ (80013dc <I2C1_Master_Reception_Callback+0x48>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
			end_of_read_flag = 0;
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <I2C1_Master_Reception_Callback+0x50>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	701a      	strb	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	bd98      	pop	{r3, r4, r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000084 	.word	0x20000084
 80013dc:	20000089 	.word	0x20000089
 80013e0:	40005400 	.word	0x40005400
 80013e4:	20000088 	.word	0x20000088

080013e8 <__NVIC_SetPriorityGrouping>:
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	@ (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_SetPriority>:
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	@ (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	@ (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	@ 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	@ 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <LL_RCC_HSI_Enable+0x1c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <LL_RCC_HSI_Enable+0x1c>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40021000 	.word	0x40021000

08001528 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <LL_RCC_HSI_IsReady+0x20>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b02      	cmp	r3, #2
 8001536:	bf0c      	ite	eq
 8001538:	2301      	moveq	r3, #1
 800153a:	2300      	movne	r3, #0
 800153c:	b2db      	uxtb	r3, r3
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40021000 	.word	0x40021000

0800154c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4904      	ldr	r1, [pc, #16]	@ (8001574 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000

08001578 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <LL_RCC_SetSysClkSource+0x24>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 0203 	bic.w	r2, r3, #3
 8001588:	4904      	ldr	r1, [pc, #16]	@ (800159c <LL_RCC_SetSysClkSource+0x24>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40021000 	.word	0x40021000

080015a0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <LL_RCC_GetSysClkSource+0x18>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 030c 	and.w	r3, r3, #12
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000

080015bc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015cc:	4904      	ldr	r1, [pc, #16]	@ (80015e0 <LL_RCC_SetAHBPrescaler+0x24>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000

080015e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <LL_RCC_SetAPB1Prescaler+0x24>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015f4:	4904      	ldr	r1, [pc, #16]	@ (8001608 <LL_RCC_SetAPB1Prescaler+0x24>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000

0800160c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800161c:	4904      	ldr	r1, [pc, #16]	@ (8001630 <LL_RCC_SetAPB2Prescaler+0x24>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40021000 	.word	0x40021000

08001634 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <LL_RCC_SetI2CClockSource+0x2c>)
 800163e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	0e1b      	lsrs	r3, r3, #24
 8001644:	43db      	mvns	r3, r3
 8001646:	401a      	ands	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800164e:	4904      	ldr	r1, [pc, #16]	@ (8001660 <LL_RCC_SetI2CClockSource+0x2c>)
 8001650:	4313      	orrs	r3, r2
 8001652:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40021000 	.word	0x40021000

08001664 <LL_APB1_GRP1_EnableClock>:
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <LL_APB1_GRP1_EnableClock+0x2c>)
 800166e:	69da      	ldr	r2, [r3, #28]
 8001670:	4907      	ldr	r1, [pc, #28]	@ (8001690 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4313      	orrs	r3, r2
 8001676:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <LL_APB1_GRP1_EnableClock+0x2c>)
 800167a:	69da      	ldr	r2, [r3, #28]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4013      	ands	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000

08001694 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800169e:	699a      	ldr	r2, [r3, #24]
 80016a0:	4907      	ldr	r1, [pc, #28]	@ (80016c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016aa:	699a      	ldr	r2, [r3, #24]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4013      	ands	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40021000 	.word	0x40021000

080016c4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <LL_FLASH_SetLatency+0x24>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 0207 	bic.w	r2, r3, #7
 80016d4:	4904      	ldr	r1, [pc, #16]	@ (80016e8 <LL_FLASH_SetLatency+0x24>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	40022000 	.word	0x40022000

080016ec <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <LL_FLASH_GetLatency+0x18>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0307 	and.w	r3, r3, #7
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40022000 	.word	0x40022000

08001708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800170c:	b0ba      	sub	sp, #232	@ 0xe8
 800170e:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff ffbf 	bl	8001694 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001716:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800171a:	f7ff ffa3 	bl	8001664 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171e:	2003      	movs	r0, #3
 8001720:	f7ff fe62 	bl	80013e8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001724:	f7ff fe84 	bl	8001430 <__NVIC_GetPriorityGrouping>
 8001728:	4603      	mov	r3, r0
 800172a:	2200      	movs	r2, #0
 800172c:	210f      	movs	r1, #15
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff feb6 	bl	80014a0 <NVIC_EncodePriority>
 8001734:	4603      	mov	r3, r0
 8001736:	4619      	mov	r1, r3
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f7ff fe86 	bl	800144c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001740:	f000 f89e 	bl	8001880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001744:	f7ff fb32 	bl	8000dac <MX_GPIO_Init>
  MX_DMA_Init();
 8001748:	f7ff faf0 	bl	8000d2c <MX_DMA_Init>
  MX_I2C1_Init();
 800174c:	f7ff fcee 	bl	800112c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001750:	f000 fdc8 	bl	80022e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HTS221_init();
 8001754:	f001 fc54 	bl	8003000 <HTS221_init>
  LPS25HB_init();
 8001758:	f001 fe02 	bl	8003360 <LPS25HB_init>

  char tx_data[120];
  const char tx_message[] = "Temperature: %2.1f°C, Humidity: %.0f%%, Altitude: %.2f m, Pressure: %.2f Pa\r\n";
 800175c:	4a42      	ldr	r2, [pc, #264]	@ (8001868 <main+0x160>)
 800175e:	463b      	mov	r3, r7
 8001760:	4611      	mov	r1, r2
 8001762:	224f      	movs	r2, #79	@ 0x4f
 8001764:	4618      	mov	r0, r3
 8001766:	f001 feb1 	bl	80034cc <memcpy>
  //uint8_t tx_data[120];
  LL_mDelay(10);
 800176a:	200a      	movs	r0, #10
 800176c:	f001 fbe4 	bl	8002f38 <LL_mDelay>
  LPS25HB_get_pressure(&refference_pressure); // Reference pressure at the start for altitude comparison
 8001770:	483e      	ldr	r0, [pc, #248]	@ (800186c <main+0x164>)
 8001772:	f001 fe39 	bl	80033e8 <LPS25HB_get_pressure>

  while (1) {
          HTS221_get_temperature(&temperature);
 8001776:	483e      	ldr	r0, [pc, #248]	@ (8001870 <main+0x168>)
 8001778:	f001 fd92 	bl	80032a0 <HTS221_get_temperature>
          HTS221_get_humidity(&humidity);
 800177c:	483d      	ldr	r0, [pc, #244]	@ (8001874 <main+0x16c>)
 800177e:	f001 fcc3 	bl	8003108 <HTS221_get_humidity>
          LPS25HB_get_pressure(&pressure);
 8001782:	483d      	ldr	r0, [pc, #244]	@ (8001878 <main+0x170>)
 8001784:	f001 fe30 	bl	80033e8 <LPS25HB_get_pressure>
          float altitude = 44330.0 * (1.0 - pow(pressure / refference_pressure, 1 / 5.255));
 8001788:	4b3b      	ldr	r3, [pc, #236]	@ (8001878 <main+0x170>)
 800178a:	ed93 7a00 	vldr	s14, [r3]
 800178e:	4b37      	ldr	r3, [pc, #220]	@ (800186c <main+0x164>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001798:	ee16 0a90 	vmov	r0, s13
 800179c:	f7fe fecc 	bl	8000538 <__aeabi_f2d>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 8001858 <main+0x150>
 80017a8:	ec43 2b10 	vmov	d0, r2, r3
 80017ac:	f002 fada 	bl	8003d64 <pow>
 80017b0:	ec53 2b10 	vmov	r2, r3, d0
 80017b4:	f04f 0000 	mov.w	r0, #0
 80017b8:	4930      	ldr	r1, [pc, #192]	@ (800187c <main+0x174>)
 80017ba:	f7fe fd5d 	bl	8000278 <__aeabi_dsub>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	a326      	add	r3, pc, #152	@ (adr r3, 8001860 <main+0x158>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe ff0c 	bl	80005e8 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f9b6 	bl	8000b48 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
          uint8_t tx_data_len = (uint8_t)sprintf(tx_data, tx_message, temperature, humidity, altitude, pressure);
 80017e2:	4b23      	ldr	r3, [pc, #140]	@ (8001870 <main+0x168>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fea6 	bl	8000538 <__aeabi_f2d>
 80017ec:	4682      	mov	sl, r0
 80017ee:	468b      	mov	fp, r1
 80017f0:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <main+0x16c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe9f 	bl	8000538 <__aeabi_f2d>
 80017fa:	4604      	mov	r4, r0
 80017fc:	460d      	mov	r5, r1
 80017fe:	f8d7 00cc 	ldr.w	r0, [r7, #204]	@ 0xcc
 8001802:	f7fe fe99 	bl	8000538 <__aeabi_f2d>
 8001806:	4680      	mov	r8, r0
 8001808:	4689      	mov	r9, r1
 800180a:	4b1b      	ldr	r3, [pc, #108]	@ (8001878 <main+0x170>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe92 	bl	8000538 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4639      	mov	r1, r7
 800181a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800181e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001822:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001826:	e9cd 4500 	strd	r4, r5, [sp]
 800182a:	4652      	mov	r2, sl
 800182c:	465b      	mov	r3, fp
 800182e:	f001 fe01 	bl	8003434 <siprintf>
 8001832:	4603      	mov	r3, r0
 8001834:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
          USART2_PutBuffer((uint8_t*)tx_data, tx_data_len);
 8001838:	f897 20cb 	ldrb.w	r2, [r7, #203]	@ 0xcb
 800183c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f000 fe30 	bl	80024a8 <USART2_PutBuffer>
          LL_mDelay(500);
 8001848:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800184c:	f001 fb74 	bl	8002f38 <LL_mDelay>
  while (1) {
 8001850:	bf00      	nop
 8001852:	e790      	b.n	8001776 <main+0x6e>
 8001854:	f3af 8000 	nop.w
 8001858:	ccd9456c 	.word	0xccd9456c
 800185c:	3fc85b95 	.word	0x3fc85b95
 8001860:	00000000 	.word	0x00000000
 8001864:	40e5a540 	.word	0x40e5a540
 8001868:	08004c40 	.word	0x08004c40
 800186c:	20000098 	.word	0x20000098
 8001870:	2000008c 	.word	0x2000008c
 8001874:	20000090 	.word	0x20000090
 8001878:	20000094 	.word	0x20000094
 800187c:	3ff00000 	.word	0x3ff00000

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001884:	2000      	movs	r0, #0
 8001886:	f7ff ff1d 	bl	80016c4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800188a:	bf00      	nop
 800188c:	f7ff ff2e 	bl	80016ec <LL_FLASH_GetLatency>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1fa      	bne.n	800188c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001896:	f7ff fe37 	bl	8001508 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800189a:	bf00      	nop
 800189c:	f7ff fe44 	bl	8001528 <LL_RCC_HSI_IsReady>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d1fa      	bne.n	800189c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80018a6:	2010      	movs	r0, #16
 80018a8:	f7ff fe50 	bl	800154c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f7ff fe85 	bl	80015bc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff fe96 	bl	80015e4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff fea7 	bl	800160c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80018be:	2000      	movs	r0, #0
 80018c0:	f7ff fe5a 	bl	8001578 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80018c4:	bf00      	nop
 80018c6:	f7ff fe6b 	bl	80015a0 <LL_RCC_GetSysClkSource>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1fa      	bne.n	80018c6 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80018d0:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <SystemClock_Config+0x68>)
 80018d2:	f001 fb23 	bl	8002f1c <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80018d6:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <SystemClock_Config+0x68>)
 80018d8:	f001 fb54 	bl	8002f84 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 80018dc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80018e0:	f7ff fea8 	bl	8001634 <LL_RCC_SetI2CClockSource>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	007a1200 	.word	0x007a1200

080018ec <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <LL_DMA_DisableChannel+0x3c>)
 80018fc:	5cd3      	ldrb	r3, [r2, r3]
 80018fe:	461a      	mov	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4413      	add	r3, r2
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	3a01      	subs	r2, #1
 800190a:	4907      	ldr	r1, [pc, #28]	@ (8001928 <LL_DMA_DisableChannel+0x3c>)
 800190c:	5c8a      	ldrb	r2, [r1, r2]
 800190e:	4611      	mov	r1, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	440a      	add	r2, r1
 8001914:	f023 0301 	bic.w	r3, r3, #1
 8001918:	6013      	str	r3, [r2, #0]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	08004c90 	.word	0x08004c90

0800192c <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800193c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001940:	bf0c      	ite	eq
 8001942:	2301      	moveq	r3, #1
 8001944:	2300      	movne	r3, #0
 8001946:	b2db      	uxtb	r3, r3
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001968:	bf0c      	ite	eq
 800196a:	2301      	moveq	r3, #1
 800196c:	2300      	movne	r3, #0
 800196e:	b2db      	uxtb	r3, r3
}
 8001970:	4618      	mov	r0, r3
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001990:	bf0c      	ite	eq
 8001992:	2301      	moveq	r3, #1
 8001994:	2300      	movne	r3, #0
 8001996:	b2db      	uxtb	r3, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80019b2:	605a      	str	r2, [r3, #4]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019ce:	605a      	str	r2, [r3, #4]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80019ea:	605a      	str	r2, [r3, #4]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_I2C_IsActiveFlag_RXNE>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d101      	bne.n	8001a10 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b10      	cmp	r3, #16
 8001a30:	d101      	bne.n	8001a36 <LL_USART_IsActiveFlag_IDLE+0x18>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a54:	2b40      	cmp	r3, #64	@ 0x40
 8001a56:	d101      	bne.n	8001a5c <LL_USART_IsActiveFlag_TC+0x18>
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <LL_USART_IsActiveFlag_TC+0x1a>
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2210      	movs	r2, #16
 8001a76:	621a      	str	r2, [r3, #32]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <NMI_Handler+0x4>

08001a8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <BusFault_Handler+0x4>

08001aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <UsageFault_Handler+0x4>

08001aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001ae8:	480a      	ldr	r0, [pc, #40]	@ (8001b14 <DMA1_Channel6_IRQHandler+0x30>)
 8001aea:	f7ff ff1f 	bl	800192c <LL_DMA_IsActiveFlag_TC6>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d103      	bne.n	8001afc <DMA1_Channel6_IRQHandler+0x18>
		{

			LL_DMA_ClearFlag_TC6(DMA1);
 8001af4:	4807      	ldr	r0, [pc, #28]	@ (8001b14 <DMA1_Channel6_IRQHandler+0x30>)
 8001af6:	f7ff ff55 	bl	80019a4 <LL_DMA_ClearFlag_TC6>
		}
		else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
		{
			LL_DMA_ClearFlag_HT6(DMA1);
		}
}
 8001afa:	e008      	b.n	8001b0e <DMA1_Channel6_IRQHandler+0x2a>
		else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001afc:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <DMA1_Channel6_IRQHandler+0x30>)
 8001afe:	f7ff ff3d 	bl	800197c <LL_DMA_IsActiveFlag_HT6>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d102      	bne.n	8001b0e <DMA1_Channel6_IRQHandler+0x2a>
			LL_DMA_ClearFlag_HT6(DMA1);
 8001b08:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <DMA1_Channel6_IRQHandler+0x30>)
 8001b0a:	f7ff ff67 	bl	80019dc <LL_DMA_ClearFlag_HT6>
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40020000 	.word	0x40020000

08001b18 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001b1c:	480a      	ldr	r0, [pc, #40]	@ (8001b48 <DMA1_Channel7_IRQHandler+0x30>)
 8001b1e:	f7ff ff19 	bl	8001954 <LL_DMA_IsActiveFlag_TC7>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10d      	bne.n	8001b44 <DMA1_Channel7_IRQHandler+0x2c>
		{
			LL_DMA_ClearFlag_TC7(DMA1);
 8001b28:	4807      	ldr	r0, [pc, #28]	@ (8001b48 <DMA1_Channel7_IRQHandler+0x30>)
 8001b2a:	f7ff ff49 	bl	80019c0 <LL_DMA_ClearFlag_TC7>

			while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001b2e:	bf00      	nop
 8001b30:	4806      	ldr	r0, [pc, #24]	@ (8001b4c <DMA1_Channel7_IRQHandler+0x34>)
 8001b32:	f7ff ff87 	bl	8001a44 <LL_USART_IsActiveFlag_TC>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f9      	beq.n	8001b30 <DMA1_Channel7_IRQHandler+0x18>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001b3c:	2107      	movs	r1, #7
 8001b3e:	4802      	ldr	r0, [pc, #8]	@ (8001b48 <DMA1_Channel7_IRQHandler+0x30>)
 8001b40:	f7ff fed4 	bl	80018ec <LL_DMA_DisableChannel>
		}
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40020000 	.word	0x40020000
 8001b4c:	40004400 	.word	0x40004400

08001b50 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	if (LL_I2C_IsActiveFlag_RXNE(I2C1)) {
 8001b54:	4804      	ldr	r0, [pc, #16]	@ (8001b68 <I2C1_EV_IRQHandler+0x18>)
 8001b56:	f7ff ff4f 	bl	80019f8 <LL_I2C_IsActiveFlag_RXNE>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <I2C1_EV_IRQHandler+0x14>
			I2C1_Master_Reception_Callback();
 8001b60:	f7ff fc18 	bl	8001394 <I2C1_Master_Reception_Callback>
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40005400 	.word	0x40005400

08001b6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001b70:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <USART2_IRQHandler+0x1c>)
 8001b72:	f7ff ff54 	bl	8001a1e <LL_USART_IsActiveFlag_IDLE>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <USART2_IRQHandler+0x16>
		{
			LL_USART_ClearFlag_IDLE(USART2);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <USART2_IRQHandler+0x1c>)
 8001b7e:	f7ff ff74 	bl	8001a6a <LL_USART_ClearFlag_IDLE>
		}
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40004400 	.word	0x40004400

08001b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b94:	4a14      	ldr	r2, [pc, #80]	@ (8001be8 <_sbrk+0x5c>)
 8001b96:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <_sbrk+0x60>)
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <_sbrk+0x64>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <_sbrk+0x64>)
 8001baa:	4a12      	ldr	r2, [pc, #72]	@ (8001bf4 <_sbrk+0x68>)
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <_sbrk+0x64>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bbc:	f001 fc5a 	bl	8003474 <__errno>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bca:	e009      	b.n	8001be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bd2:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <_sbrk+0x64>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <_sbrk+0x64>)
 8001bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bde:	68fb      	ldr	r3, [r7, #12]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20003000 	.word	0x20003000
 8001bec:	00000400 	.word	0x00000400
 8001bf0:	2000009c 	.word	0x2000009c
 8001bf4:	20000280 	.word	0x20000280

08001bf8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <SystemInit+0x20>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <SystemInit+0x20>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_EnableIRQ>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4907      	ldr	r1, [pc, #28]	@ (8001c54 <__NVIC_EnableIRQ+0x38>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	@ (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	@ (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <LL_DMA_EnableChannel>:
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce8 <LL_DMA_EnableChannel+0x3c>)
 8001cbc:	5cd3      	ldrb	r3, [r2, r3]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	3a01      	subs	r2, #1
 8001cca:	4907      	ldr	r1, [pc, #28]	@ (8001ce8 <LL_DMA_EnableChannel+0x3c>)
 8001ccc:	5c8a      	ldrb	r2, [r1, r2]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	440a      	add	r2, r1
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6013      	str	r3, [r2, #0]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	08004cb0 	.word	0x08004cb0

08001cec <LL_DMA_SetDataTransferDirection>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d34 <LL_DMA_SetDataTransferDirection+0x48>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	461a      	mov	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4413      	add	r3, r2
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d0c:	f023 0310 	bic.w	r3, r3, #16
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	3a01      	subs	r2, #1
 8001d14:	4907      	ldr	r1, [pc, #28]	@ (8001d34 <LL_DMA_SetDataTransferDirection+0x48>)
 8001d16:	5c8a      	ldrb	r2, [r1, r2]
 8001d18:	4611      	mov	r1, r2
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	440a      	add	r2, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
}
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	08004cb0 	.word	0x08004cb0

08001d38 <LL_DMA_GetDataTransferDirection>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	4a07      	ldr	r2, [pc, #28]	@ (8001d64 <LL_DMA_GetDataTransferDirection+0x2c>)
 8001d48:	5cd3      	ldrb	r3, [r2, r3]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	f244 0310 	movw	r3, #16400	@ 0x4010
 8001d56:	4013      	ands	r3, r2
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	08004cb0 	.word	0x08004cb0

08001d68 <LL_DMA_SetMode>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	4a0c      	ldr	r2, [pc, #48]	@ (8001dac <LL_DMA_SetMode+0x44>)
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4413      	add	r3, r2
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 0220 	bic.w	r2, r3, #32
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	4907      	ldr	r1, [pc, #28]	@ (8001dac <LL_DMA_SetMode+0x44>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	4619      	mov	r1, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	440b      	add	r3, r1
 8001d96:	4619      	mov	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	08004cb0 	.word	0x08004cb0

08001db0 <LL_DMA_SetPeriphIncMode>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001df4 <LL_DMA_SetPeriphIncMode+0x44>)
 8001dc2:	5cd3      	ldrb	r3, [r2, r3]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	4413      	add	r3, r2
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	4907      	ldr	r1, [pc, #28]	@ (8001df4 <LL_DMA_SetPeriphIncMode+0x44>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	4619      	mov	r1, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	440b      	add	r3, r1
 8001dde:	4619      	mov	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	08004cb0 	.word	0x08004cb0

08001df8 <LL_DMA_SetMemoryIncMode>:
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	4a0c      	ldr	r2, [pc, #48]	@ (8001e3c <LL_DMA_SetMemoryIncMode+0x44>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4413      	add	r3, r2
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	4907      	ldr	r1, [pc, #28]	@ (8001e3c <LL_DMA_SetMemoryIncMode+0x44>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	4619      	mov	r1, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	440b      	add	r3, r1
 8001e26:	4619      	mov	r1, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	08004cb0 	.word	0x08004cb0

08001e40 <LL_DMA_SetPeriphSize>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	4a0c      	ldr	r2, [pc, #48]	@ (8001e84 <LL_DMA_SetPeriphSize+0x44>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	461a      	mov	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4413      	add	r3, r2
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	4907      	ldr	r1, [pc, #28]	@ (8001e84 <LL_DMA_SetPeriphSize+0x44>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	440b      	add	r3, r1
 8001e6e:	4619      	mov	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	08004cb0 	.word	0x08004cb0

08001e88 <LL_DMA_SetMemorySize>:
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	4a0c      	ldr	r2, [pc, #48]	@ (8001ecc <LL_DMA_SetMemorySize+0x44>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	4907      	ldr	r1, [pc, #28]	@ (8001ecc <LL_DMA_SetMemorySize+0x44>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	440b      	add	r3, r1
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	08004cb0 	.word	0x08004cb0

08001ed0 <LL_DMA_SetChannelPriorityLevel>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8001f14 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001ee2:	5cd3      	ldrb	r3, [r2, r3]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4413      	add	r3, r2
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	4907      	ldr	r1, [pc, #28]	@ (8001f14 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	440b      	add	r3, r1
 8001efe:	4619      	mov	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	08004cb0 	.word	0x08004cb0

08001f18 <LL_DMA_SetDataLength>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	4a0c      	ldr	r2, [pc, #48]	@ (8001f5c <LL_DMA_SetDataLength+0x44>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4413      	add	r3, r2
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	041b      	lsls	r3, r3, #16
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	3a01      	subs	r2, #1
 8001f3c:	4907      	ldr	r1, [pc, #28]	@ (8001f5c <LL_DMA_SetDataLength+0x44>)
 8001f3e:	5c8a      	ldrb	r2, [r1, r2]
 8001f40:	4611      	mov	r1, r2
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	440a      	add	r2, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
}
 8001f4e:	bf00      	nop
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	08004cb0 	.word	0x08004cb0

08001f60 <LL_DMA_ConfigAddresses>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b10      	cmp	r3, #16
 8001f72:	d114      	bne.n	8001f9e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	4a16      	ldr	r2, [pc, #88]	@ (8001fd4 <LL_DMA_ConfigAddresses+0x74>)
 8001f7a:	5cd3      	ldrb	r3, [r2, r3]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	4413      	add	r3, r2
 8001f82:	461a      	mov	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <LL_DMA_ConfigAddresses+0x74>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	461a      	mov	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	461a      	mov	r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	6093      	str	r3, [r2, #8]
}
 8001f9c:	e013      	b.n	8001fc6 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd4 <LL_DMA_ConfigAddresses+0x74>)
 8001fa4:	5cd3      	ldrb	r3, [r2, r3]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	461a      	mov	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <LL_DMA_ConfigAddresses+0x74>)
 8001fb8:	5cd3      	ldrb	r3, [r2, r3]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	60d3      	str	r3, [r2, #12]
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	08004cb0 	.word	0x08004cb0

08001fd8 <LL_DMA_SetMemoryAddress>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	4a06      	ldr	r2, [pc, #24]	@ (8002004 <LL_DMA_SetMemoryAddress+0x2c>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	461a      	mov	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	08004cb0 	.word	0x08004cb0

08002008 <LL_DMA_SetPeriphAddress>:
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	3b01      	subs	r3, #1
 8002018:	4a06      	ldr	r2, [pc, #24]	@ (8002034 <LL_DMA_SetPeriphAddress+0x2c>)
 800201a:	5cd3      	ldrb	r3, [r2, r3]
 800201c:	461a      	mov	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4413      	add	r3, r2
 8002022:	461a      	mov	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6093      	str	r3, [r2, #8]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	08004cb0 	.word	0x08004cb0

08002038 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	3b01      	subs	r3, #1
 8002046:	4a0b      	ldr	r2, [pc, #44]	@ (8002074 <LL_DMA_EnableIT_TC+0x3c>)
 8002048:	5cd3      	ldrb	r3, [r2, r3]
 800204a:	461a      	mov	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	3a01      	subs	r2, #1
 8002056:	4907      	ldr	r1, [pc, #28]	@ (8002074 <LL_DMA_EnableIT_TC+0x3c>)
 8002058:	5c8a      	ldrb	r2, [r1, r2]
 800205a:	4611      	mov	r1, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	440a      	add	r2, r1
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	6013      	str	r3, [r2, #0]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	08004cb0 	.word	0x08004cb0

08002078 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	3b01      	subs	r3, #1
 8002086:	4a0b      	ldr	r2, [pc, #44]	@ (80020b4 <LL_DMA_EnableIT_HT+0x3c>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	461a      	mov	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	3a01      	subs	r2, #1
 8002096:	4907      	ldr	r1, [pc, #28]	@ (80020b4 <LL_DMA_EnableIT_HT+0x3c>)
 8002098:	5c8a      	ldrb	r2, [r1, r2]
 800209a:	4611      	mov	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	440a      	add	r2, r1
 80020a0:	f043 0304 	orr.w	r3, r3, #4
 80020a4:	6013      	str	r3, [r2, #0]
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	08004cb0 	.word	0x08004cb0

080020b8 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	4a0b      	ldr	r2, [pc, #44]	@ (80020f4 <LL_DMA_EnableIT_TE+0x3c>)
 80020c8:	5cd3      	ldrb	r3, [r2, r3]
 80020ca:	461a      	mov	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	3a01      	subs	r2, #1
 80020d6:	4907      	ldr	r1, [pc, #28]	@ (80020f4 <LL_DMA_EnableIT_TE+0x3c>)
 80020d8:	5c8a      	ldrb	r2, [r1, r2]
 80020da:	4611      	mov	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	440a      	add	r2, r1
 80020e0:	f043 0308 	orr.w	r3, r3, #8
 80020e4:	6013      	str	r3, [r2, #0]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	08004cb0 	.word	0x08004cb0

080020f8 <LL_AHB1_GRP1_EnableClock>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	4907      	ldr	r1, [pc, #28]	@ (8002124 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4313      	orrs	r3, r2
 800210a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800210c:	4b05      	ldr	r3, [pc, #20]	@ (8002124 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4013      	ands	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002116:	68fb      	ldr	r3, [r7, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40021000 	.word	0x40021000

08002128 <LL_APB1_GRP1_EnableClock>:
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	4907      	ldr	r1, [pc, #28]	@ (8002154 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4313      	orrs	r3, r2
 800213a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800213c:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <LL_APB1_GRP1_EnableClock+0x2c>)
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4013      	ands	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	40021000 	.word	0x40021000

08002158 <LL_USART_Enable>:
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	601a      	str	r2, [r3, #0]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_USART_ConfigAsyncMode>:
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	609a      	str	r2, [r3, #8]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	@ 0x24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	e853 3f00 	ldrex	r3, [r3]
 80021b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	f043 0310 	orr.w	r3, r3, #16
 80021be:	61fb      	str	r3, [r7, #28]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	61ba      	str	r2, [r7, #24]
 80021c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c8:	6979      	ldr	r1, [r7, #20]
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	e841 2300 	strex	r3, r2, [r1]
 80021d0:	613b      	str	r3, [r7, #16]
   return(result);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e9      	bne.n	80021ac <LL_USART_EnableIT_IDLE+0x8>
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	3724      	adds	r7, #36	@ 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b089      	sub	sp, #36	@ 0x24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3308      	adds	r3, #8
 80021f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	e853 3f00 	ldrex	r3, [r3]
 80021fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002202:	61fb      	str	r3, [r7, #28]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3308      	adds	r3, #8
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	61ba      	str	r2, [r7, #24]
 800220c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800220e:	6979      	ldr	r1, [r7, #20]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	e841 2300 	strex	r3, r2, [r1]
 8002216:	613b      	str	r3, [r7, #16]
   return(result);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1e7      	bne.n	80021ee <LL_USART_DisableIT_CTS+0x8>
}
 800221e:	bf00      	nop
 8002220:	bf00      	nop
 8002222:	3724      	adds	r7, #36	@ 0x24
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	@ 0x24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3308      	adds	r3, #8
 8002238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	e853 3f00 	ldrex	r3, [r3]
 8002240:	60bb      	str	r3, [r7, #8]
   return(result);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3308      	adds	r3, #8
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	61ba      	str	r2, [r7, #24]
 8002252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002254:	6979      	ldr	r1, [r7, #20]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	e841 2300 	strex	r3, r2, [r1]
 800225c:	613b      	str	r3, [r7, #16]
   return(result);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e7      	bne.n	8002234 <LL_USART_EnableDMAReq_RX+0x8>
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3724      	adds	r7, #36	@ 0x24
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002272:	b480      	push	{r7}
 8002274:	b089      	sub	sp, #36	@ 0x24
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3308      	adds	r3, #8
 800227e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	e853 3f00 	ldrex	r3, [r3]
 8002286:	60bb      	str	r3, [r7, #8]
   return(result);
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3308      	adds	r3, #8
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	61ba      	str	r2, [r7, #24]
 8002298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800229a:	6979      	ldr	r1, [r7, #20]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	e841 2300 	strex	r3, r2, [r1]
 80022a2:	613b      	str	r3, [r7, #16]
   return(result);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1e7      	bne.n	800227a <LL_USART_EnableDMAReq_TX+0x8>
}
 80022aa:	bf00      	nop
 80022ac:	bf00      	nop
 80022ae:	3724      	adds	r7, #36	@ 0x24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d103      	bne.n	80022d0 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3328      	adds	r3, #40	@ 0x28
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	e002      	b.n	80022d6 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3324      	adds	r3, #36	@ 0x24
 80022d4:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80022d6:	68fb      	ldr	r3, [r7, #12]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <MX_USART2_UART_Init>:

/* Space for global variables, if you need them */

// type global variables here
/* USART2 init function */
void MX_USART2_UART_Init(void) {
 80022e4:	b5b0      	push	{r4, r5, r7, lr}
 80022e6:	b090      	sub	sp, #64	@ 0x40
 80022e8:	af02      	add	r7, sp, #8
	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]
 80022fa:	615a      	str	r2, [r3, #20]
 80022fc:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
 800230c:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800230e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002312:	f7ff ff09 	bl	8002128 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002316:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800231a:	f7ff feed 	bl	80020f8 <LL_AHB1_GRP1_EnableClock>
	/**USART2 GPIO Configuration
	 PA2   ------> USART2_TX
	 PA15   ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2 | LL_GPIO_PIN_15;
 800231e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002322:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002324:	2302      	movs	r3, #2
 8002326:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002334:	2307      	movs	r3, #7
 8002336:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	4619      	mov	r1, r3
 800233c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002340:	f000 fa00 	bl	8002744 <LL_GPIO_Init>
	 * For more information about DMA registers, refer to reference manual.
	 */

	/* USART2_RX Init */

	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6,
 8002344:	2200      	movs	r2, #0
 8002346:	2106      	movs	r1, #6
 8002348:	4854      	ldr	r0, [pc, #336]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 800234a:	f7ff fccf 	bl	8001cec <LL_DMA_SetDataTransferDirection>
	LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6,
 800234e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002352:	2106      	movs	r1, #6
 8002354:	4851      	ldr	r0, [pc, #324]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 8002356:	f7ff fdbb 	bl	8001ed0 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_PRIORITY_MEDIUM);
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800235a:	2200      	movs	r2, #0
 800235c:	2106      	movs	r1, #6
 800235e:	484f      	ldr	r0, [pc, #316]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 8002360:	f7ff fd02 	bl	8001d68 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002364:	2200      	movs	r2, #0
 8002366:	2106      	movs	r1, #6
 8002368:	484c      	ldr	r0, [pc, #304]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 800236a:	f7ff fd21 	bl	8001db0 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800236e:	2280      	movs	r2, #128	@ 0x80
 8002370:	2106      	movs	r1, #6
 8002372:	484a      	ldr	r0, [pc, #296]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 8002374:	f7ff fd40 	bl	8001df8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002378:	2200      	movs	r2, #0
 800237a:	2106      	movs	r1, #6
 800237c:	4847      	ldr	r0, [pc, #284]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 800237e:	f7ff fd5f 	bl	8001e40 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002382:	2200      	movs	r2, #0
 8002384:	2106      	movs	r1, #6
 8002386:	4845      	ldr	r0, [pc, #276]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 8002388:	f7ff fd7e 	bl	8001e88 <LL_DMA_SetMemorySize>

	LL_DMA_ConfigAddresses( DMA1, LL_DMA_CHANNEL_6,
 800238c:	2101      	movs	r1, #1
 800238e:	4844      	ldr	r0, [pc, #272]	@ (80024a0 <MX_USART2_UART_Init+0x1bc>)
 8002390:	f7ff ff92 	bl	80022b8 <LL_USART_DMA_GetRegAddr>
 8002394:	4604      	mov	r4, r0
 8002396:	4d43      	ldr	r5, [pc, #268]	@ (80024a4 <MX_USART2_UART_Init+0x1c0>)
 8002398:	2106      	movs	r1, #6
 800239a:	4840      	ldr	r0, [pc, #256]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 800239c:	f7ff fccc 	bl	8001d38 <LL_DMA_GetDataTransferDirection>
 80023a0:	4603      	mov	r3, r0
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	462b      	mov	r3, r5
 80023a6:	4622      	mov	r2, r4
 80023a8:	2106      	movs	r1, #6
 80023aa:	483c      	ldr	r0, [pc, #240]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 80023ac:	f7ff fdd8 	bl	8001f60 <LL_DMA_ConfigAddresses>
			LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
			(uint32_t) bufferUSART2dma,
			LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80023b0:	2280      	movs	r2, #128	@ 0x80
 80023b2:	2106      	movs	r1, #6
 80023b4:	4839      	ldr	r0, [pc, #228]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 80023b6:	f7ff fdaf 	bl	8001f18 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80023ba:	2106      	movs	r1, #6
 80023bc:	4837      	ldr	r0, [pc, #220]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 80023be:	f7ff fc75 	bl	8001cac <LL_DMA_EnableChannel>
	LL_USART_EnableDMAReq_RX(USART2);
 80023c2:	4837      	ldr	r0, [pc, #220]	@ (80024a0 <MX_USART2_UART_Init+0x1bc>)
 80023c4:	f7ff ff32 	bl	800222c <LL_USART_EnableDMAReq_RX>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80023c8:	2106      	movs	r1, #6
 80023ca:	4834      	ldr	r0, [pc, #208]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 80023cc:	f7ff fe34 	bl	8002038 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80023d0:	2106      	movs	r1, #6
 80023d2:	4832      	ldr	r0, [pc, #200]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 80023d4:	f7ff fe50 	bl	8002078 <LL_DMA_EnableIT_HT>

	/* USART2_TX Init */

	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7,
 80023d8:	2210      	movs	r2, #16
 80023da:	2107      	movs	r1, #7
 80023dc:	482f      	ldr	r0, [pc, #188]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 80023de:	f7ff fc85 	bl	8001cec <LL_DMA_SetDataTransferDirection>
	LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7,
 80023e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023e6:	2107      	movs	r1, #7
 80023e8:	482c      	ldr	r0, [pc, #176]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 80023ea:	f7ff fd71 	bl	8001ed0 <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_PRIORITY_MEDIUM);
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2107      	movs	r1, #7
 80023f2:	482a      	ldr	r0, [pc, #168]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 80023f4:	f7ff fcb8 	bl	8001d68 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2107      	movs	r1, #7
 80023fc:	4827      	ldr	r0, [pc, #156]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 80023fe:	f7ff fcd7 	bl	8001db0 <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002402:	2280      	movs	r2, #128	@ 0x80
 8002404:	2107      	movs	r1, #7
 8002406:	4825      	ldr	r0, [pc, #148]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 8002408:	f7ff fcf6 	bl	8001df8 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800240c:	2200      	movs	r2, #0
 800240e:	2107      	movs	r1, #7
 8002410:	4822      	ldr	r0, [pc, #136]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 8002412:	f7ff fd15 	bl	8001e40 <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002416:	2200      	movs	r2, #0
 8002418:	2107      	movs	r1, #7
 800241a:	4820      	ldr	r0, [pc, #128]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 800241c:	f7ff fd34 	bl	8001e88 <LL_DMA_SetMemorySize>

	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7,
 8002420:	2100      	movs	r1, #0
 8002422:	481f      	ldr	r0, [pc, #124]	@ (80024a0 <MX_USART2_UART_Init+0x1bc>)
 8002424:	f7ff ff48 	bl	80022b8 <LL_USART_DMA_GetRegAddr>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	2107      	movs	r1, #7
 800242e:	481b      	ldr	r0, [pc, #108]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 8002430:	f7ff fdea 	bl	8002008 <LL_DMA_SetPeriphAddress>
			LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
	LL_USART_EnableDMAReq_TX(USART2);
 8002434:	481a      	ldr	r0, [pc, #104]	@ (80024a0 <MX_USART2_UART_Init+0x1bc>)
 8002436:	f7ff ff1c 	bl	8002272 <LL_USART_EnableDMAReq_TX>

	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800243a:	2107      	movs	r1, #7
 800243c:	4817      	ldr	r0, [pc, #92]	@ (800249c <MX_USART2_UART_Init+0x1b8>)
 800243e:	f7ff fe3b 	bl	80020b8 <LL_DMA_EnableIT_TE>

	/* USART2 interrupt Init */
	NVIC_SetPriority(USART2_IRQn, 0);
 8002442:	2100      	movs	r1, #0
 8002444:	2026      	movs	r0, #38	@ 0x26
 8002446:	f7ff fc07 	bl	8001c58 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 800244a:	2026      	movs	r0, #38	@ 0x26
 800244c:	f7ff fbe6 	bl	8001c1c <__NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 256000;
 8002450:	f44f 337a 	mov.w	r3, #256000	@ 0x3e800
 8002454:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800245e:	2300      	movs	r3, #0
 8002460:	62bb      	str	r3, [r7, #40]	@ 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002462:	230c      	movs	r3, #12
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002466:	2300      	movs	r3, #0
 8002468:	633b      	str	r3, [r7, #48]	@ 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800246a:	2300      	movs	r3, #0
 800246c:	637b      	str	r3, [r7, #52]	@ 0x34
	LL_USART_Init(USART2, &USART_InitStruct);
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	480a      	ldr	r0, [pc, #40]	@ (80024a0 <MX_USART2_UART_Init+0x1bc>)
 8002476:	f000 fccb 	bl	8002e10 <LL_USART_Init>
	LL_USART_ConfigAsyncMode(USART2);
 800247a:	4809      	ldr	r0, [pc, #36]	@ (80024a0 <MX_USART2_UART_Init+0x1bc>)
 800247c:	f7ff fe7c 	bl	8002178 <LL_USART_ConfigAsyncMode>
	LL_USART_DisableIT_CTS(USART2);
 8002480:	4807      	ldr	r0, [pc, #28]	@ (80024a0 <MX_USART2_UART_Init+0x1bc>)
 8002482:	f7ff feb0 	bl	80021e6 <LL_USART_DisableIT_CTS>

	LL_USART_EnableIT_IDLE(USART2);
 8002486:	4806      	ldr	r0, [pc, #24]	@ (80024a0 <MX_USART2_UART_Init+0x1bc>)
 8002488:	f7ff fe8c 	bl	80021a4 <LL_USART_EnableIT_IDLE>
	LL_USART_Enable(USART2);
 800248c:	4804      	ldr	r0, [pc, #16]	@ (80024a0 <MX_USART2_UART_Init+0x1bc>)
 800248e:	f7ff fe63 	bl	8002158 <LL_USART_Enable>

	//type your code here:
}
 8002492:	bf00      	nop
 8002494:	3738      	adds	r7, #56	@ 0x38
 8002496:	46bd      	mov	sp, r7
 8002498:	bdb0      	pop	{r4, r5, r7, pc}
 800249a:	bf00      	nop
 800249c:	40020000 	.word	0x40020000
 80024a0:	40004400 	.word	0x40004400
 80024a4:	200000a0 	.word	0x200000a0

080024a8 <USART2_PutBuffer>:

// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t) buffer);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	461a      	mov	r2, r3
 80024b8:	2107      	movs	r1, #7
 80024ba:	480a      	ldr	r0, [pc, #40]	@ (80024e4 <USART2_PutBuffer+0x3c>)
 80024bc:	f7ff fd8c 	bl	8001fd8 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	461a      	mov	r2, r3
 80024c4:	2107      	movs	r1, #7
 80024c6:	4807      	ldr	r0, [pc, #28]	@ (80024e4 <USART2_PutBuffer+0x3c>)
 80024c8:	f7ff fd26 	bl	8001f18 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80024cc:	2107      	movs	r1, #7
 80024ce:	4805      	ldr	r0, [pc, #20]	@ (80024e4 <USART2_PutBuffer+0x3c>)
 80024d0:	f7ff fdb2 	bl	8002038 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80024d4:	2107      	movs	r1, #7
 80024d6:	4803      	ldr	r0, [pc, #12]	@ (80024e4 <USART2_PutBuffer+0x3c>)
 80024d8:	f7ff fbe8 	bl	8001cac <LL_DMA_EnableChannel>
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40020000 	.word	0x40020000

080024e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002520 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80024ec:	f7ff fb84 	bl	8001bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024f0:	480c      	ldr	r0, [pc, #48]	@ (8002524 <LoopForever+0x6>)
  ldr r1, =_edata
 80024f2:	490d      	ldr	r1, [pc, #52]	@ (8002528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024f4:	4a0d      	ldr	r2, [pc, #52]	@ (800252c <LoopForever+0xe>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024f8:	e002      	b.n	8002500 <LoopCopyDataInit>

080024fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fe:	3304      	adds	r3, #4

08002500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002504:	d3f9      	bcc.n	80024fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002506:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002508:	4c0a      	ldr	r4, [pc, #40]	@ (8002534 <LoopForever+0x16>)
  movs r3, #0
 800250a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800250c:	e001      	b.n	8002512 <LoopFillZerobss>

0800250e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002510:	3204      	adds	r2, #4

08002512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002514:	d3fb      	bcc.n	800250e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002516:	f000 ffb3 	bl	8003480 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800251a:	f7ff f8f5 	bl	8001708 <main>

0800251e <LoopForever>:

LoopForever:
    b LoopForever
 800251e:	e7fe      	b.n	800251e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002520:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002528:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800252c:	08004d30 	.word	0x08004d30
  ldr r2, =_sbss
 8002530:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002534:	2000027c 	.word	0x2000027c

08002538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002538:	e7fe      	b.n	8002538 <ADC1_2_IRQHandler>

0800253a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800253a:	b480      	push	{r7}
 800253c:	b089      	sub	sp, #36	@ 0x24
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fa93 f3a3 	rbit	r3, r3
 8002554:	613b      	str	r3, [r7, #16]
  return result;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	2103      	movs	r1, #3
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	401a      	ands	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	61bb      	str	r3, [r7, #24]
  return result;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	431a      	orrs	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	601a      	str	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	3724      	adds	r7, #36	@ 0x24
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	401a      	ands	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	431a      	orrs	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	605a      	str	r2, [r3, #4]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b089      	sub	sp, #36	@ 0x24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	613b      	str	r3, [r7, #16]
  return result;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2103      	movs	r1, #3
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	401a      	ands	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	61bb      	str	r3, [r7, #24]
  return result;
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	fa01 f303 	lsl.w	r3, r1, r3
 8002614:	431a      	orrs	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800261a:	bf00      	nop
 800261c:	3724      	adds	r7, #36	@ 0x24
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002626:	b480      	push	{r7}
 8002628:	b089      	sub	sp, #36	@ 0x24
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	613b      	str	r3, [r7, #16]
  return result;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	2103      	movs	r1, #3
 800264e:	fa01 f303 	lsl.w	r3, r1, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	401a      	ands	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	61bb      	str	r3, [r7, #24]
  return result;
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	fab3 f383 	clz	r3, r3
 8002668:	b2db      	uxtb	r3, r3
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	431a      	orrs	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	60da      	str	r2, [r3, #12]
}
 8002678:	bf00      	nop
 800267a:	3724      	adds	r7, #36	@ 0x24
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a1a      	ldr	r2, [r3, #32]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	613b      	str	r3, [r7, #16]
  return result;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	210f      	movs	r1, #15
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	401a      	ands	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	61bb      	str	r3, [r7, #24]
  return result;
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	431a      	orrs	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80026d6:	bf00      	nop
 80026d8:	3724      	adds	r7, #36	@ 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b089      	sub	sp, #36	@ 0x24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	0a1b      	lsrs	r3, r3, #8
 80026f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	613b      	str	r3, [r7, #16]
  return result;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	b2db      	uxtb	r3, r3
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	210f      	movs	r1, #15
 800270c:	fa01 f303 	lsl.w	r3, r1, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	401a      	ands	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	61bb      	str	r3, [r7, #24]
  return result;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	fa01 f303 	lsl.w	r3, r1, r3
 8002732:	431a      	orrs	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002738:	bf00      	nop
 800273a:	3724      	adds	r7, #36	@ 0x24
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	613b      	str	r3, [r7, #16]
  return result;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002766:	e051      	b.n	800280c <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d043      	beq.n	8002806 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d003      	beq.n	800278e <LL_GPIO_Init+0x4a>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d10e      	bne.n	80027ac <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	461a      	mov	r2, r3
 8002794:	69b9      	ldr	r1, [r7, #24]
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff16 	bl	80025c8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6819      	ldr	r1, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	461a      	mov	r2, r3
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff fef6 	bl	8002598 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	461a      	mov	r2, r3
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff36 	bl	8002626 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d11a      	bne.n	80027f8 <LL_GPIO_Init+0xb4>
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	60bb      	str	r3, [r7, #8]
  return result;
 80027ce:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b07      	cmp	r3, #7
 80027d8:	d807      	bhi.n	80027ea <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	461a      	mov	r2, r3
 80027e0:	69b9      	ldr	r1, [r7, #24]
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ff4e 	bl	8002684 <LL_GPIO_SetAFPin_0_7>
 80027e8:	e006      	b.n	80027f8 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	461a      	mov	r2, r3
 80027f0:	69b9      	ldr	r1, [r7, #24]
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ff75 	bl	80026e2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	461a      	mov	r2, r3
 80027fe:	69b9      	ldr	r1, [r7, #24]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff fe9a 	bl	800253a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3301      	adds	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1a6      	bne.n	8002768 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3720      	adds	r7, #32
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <LL_I2C_Enable>:
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f043 0201 	orr.w	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	601a      	str	r2, [r3, #0]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_I2C_Disable>:
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 0201 	bic.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	601a      	str	r2, [r3, #0]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_I2C_ConfigFilters>:
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0219      	lsls	r1, r3, #8
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	430b      	orrs	r3, r1
 8002880:	431a      	orrs	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	601a      	str	r2, [r3, #0]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_I2C_SetOwnAddress1>:
{
 8002892:	b480      	push	{r7}
 8002894:	b085      	sub	sp, #20
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028a6:	f023 0307 	bic.w	r3, r3, #7
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	609a      	str	r2, [r3, #8]
}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_I2C_EnableOwnAddress1>:
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	609a      	str	r2, [r3, #8]
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_I2C_DisableOwnAddress1>:
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	609a      	str	r2, [r3, #8]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <LL_I2C_SetTiming>:
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	611a      	str	r2, [r3, #16]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_I2C_SetMode>:
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	601a      	str	r2, [r3, #0]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <LL_I2C_AcknowledgeNextData>:
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	605a      	str	r2, [r3, #4]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff65 	bl	8002844 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6899      	ldr	r1, [r3, #8]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	461a      	mov	r2, r3
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff6d 	bl	8002864 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4619      	mov	r1, r3
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ffb6 	bl	8002902 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff ff44 	bl	8002824 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff ffa0 	bl	80028e2 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6919      	ldr	r1, [r3, #16]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	461a      	mov	r2, r3
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff ff70 	bl	8002892 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ff81 	bl	80028c2 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffa9 	bl	800291e <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	4619      	mov	r1, r3
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ffb6 	bl	8002944 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <LL_RCC_HSI_IsReady>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80029e8:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <LL_RCC_HSI_IsReady+0x20>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40021000 	.word	0x40021000

08002a08 <LL_RCC_LSE_IsReady>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <LL_RCC_LSE_IsReady+0x20>)
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40021000 	.word	0x40021000

08002a2c <LL_RCC_GetSysClkSource>:
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a30:	4b04      	ldr	r3, [pc, #16]	@ (8002a44 <LL_RCC_GetSysClkSource+0x18>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000

08002a48 <LL_RCC_GetAHBPrescaler>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a4c:	4b04      	ldr	r3, [pc, #16]	@ (8002a60 <LL_RCC_GetAHBPrescaler+0x18>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000

08002a64 <LL_RCC_GetAPB1Prescaler>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <LL_RCC_GetAPB1Prescaler+0x18>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000

08002a80 <LL_RCC_GetAPB2Prescaler>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a84:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000

08002a9c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002aa4:	4b07      	ldr	r3, [pc, #28]	@ (8002ac4 <LL_RCC_GetUSARTClockSource+0x28>)
 8002aa6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aa8:	2103      	movs	r1, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	401a      	ands	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	4313      	orrs	r3, r2
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002acc:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <LL_RCC_PLL_GetMainSource+0x18>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002ae8:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000

08002b00 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002b04:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <LL_RCC_PLL_GetPrediv+0x18>)
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	f003 030f 	and.w	r3, r3, #15
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000

08002b1c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002b24:	f000 f862 	bl	8002bec <RCC_GetSystemClockFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f880 	bl	8002c38 <RCC_GetHCLKClockFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f88e 	bl	8002c64 <RCC_GetPCLK1ClockFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f89a 	bl	8002c8c <RCC_GetPCLK2ClockFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	60da      	str	r2, [r3, #12]
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d130      	bne.n	8002bdc <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ff8e 	bl	8002a9c <LL_RCC_GetUSARTClockSource>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d00a      	beq.n	8002b9c <LL_RCC_GetUSARTClockFreq+0x34>
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d819      	bhi.n	8002bbe <LL_RCC_GetUSARTClockFreq+0x56>
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d002      	beq.n	8002b94 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d00c      	beq.n	8002bac <LL_RCC_GetUSARTClockFreq+0x44>
 8002b92:	e014      	b.n	8002bbe <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002b94:	f000 f82a 	bl	8002bec <RCC_GetSystemClockFreq>
 8002b98:	60f8      	str	r0, [r7, #12]
        break;
 8002b9a:	e01f      	b.n	8002bdc <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002b9c:	f7ff ff22 	bl	80029e4 <LL_RCC_HSI_IsReady>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d017      	beq.n	8002bd6 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <LL_RCC_GetUSARTClockFreq+0x80>)
 8002ba8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002baa:	e014      	b.n	8002bd6 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002bac:	f7ff ff2c 	bl	8002a08 <LL_RCC_LSE_IsReady>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d011      	beq.n	8002bda <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8002bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bba:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002bbc:	e00d      	b.n	8002bda <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002bbe:	f000 f815 	bl	8002bec <RCC_GetSystemClockFreq>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 f837 	bl	8002c38 <RCC_GetHCLKClockFreq>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 f849 	bl	8002c64 <RCC_GetPCLK1ClockFreq>
 8002bd2:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8002bd4:	e002      	b.n	8002bdc <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002bda:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	007a1200 	.word	0x007a1200

08002bec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002bf6:	f7ff ff19 	bl	8002a2c <LL_RCC_GetSysClkSource>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d00c      	beq.n	8002c1a <RCC_GetSystemClockFreq+0x2e>
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d80e      	bhi.n	8002c22 <RCC_GetSystemClockFreq+0x36>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <RCC_GetSystemClockFreq+0x22>
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d003      	beq.n	8002c14 <RCC_GetSystemClockFreq+0x28>
 8002c0c:	e009      	b.n	8002c22 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002c0e:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <RCC_GetSystemClockFreq+0x48>)
 8002c10:	607b      	str	r3, [r7, #4]
      break;
 8002c12:	e009      	b.n	8002c28 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002c14:	4b07      	ldr	r3, [pc, #28]	@ (8002c34 <RCC_GetSystemClockFreq+0x48>)
 8002c16:	607b      	str	r3, [r7, #4]
      break;
 8002c18:	e006      	b.n	8002c28 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002c1a:	f000 f84b 	bl	8002cb4 <RCC_PLL_GetFreqDomain_SYS>
 8002c1e:	6078      	str	r0, [r7, #4]
      break;
 8002c20:	e002      	b.n	8002c28 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002c22:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <RCC_GetSystemClockFreq+0x48>)
 8002c24:	607b      	str	r3, [r7, #4]
      break;
 8002c26:	bf00      	nop
  }

  return frequency;
 8002c28:	687b      	ldr	r3, [r7, #4]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	007a1200 	.word	0x007a1200

08002c38 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002c40:	f7ff ff02 	bl	8002a48 <LL_RCC_GetAHBPrescaler>
 8002c44:	4603      	mov	r3, r0
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	4a04      	ldr	r2, [pc, #16]	@ (8002c60 <RCC_GetHCLKClockFreq+0x28>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	461a      	mov	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	40d3      	lsrs	r3, r2
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	08004c98 	.word	0x08004c98

08002c64 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002c6c:	f7ff fefa 	bl	8002a64 <LL_RCC_GetAPB1Prescaler>
 8002c70:	4603      	mov	r3, r0
 8002c72:	0a1b      	lsrs	r3, r3, #8
 8002c74:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <RCC_GetPCLK1ClockFreq+0x24>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	40d3      	lsrs	r3, r2
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	08004ca8 	.word	0x08004ca8

08002c8c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002c94:	f7ff fef4 	bl	8002a80 <LL_RCC_GetAPB2Prescaler>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	0adb      	lsrs	r3, r3, #11
 8002c9c:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <RCC_GetPCLK2ClockFreq+0x24>)
 8002c9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	40d3      	lsrs	r3, r2
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	08004ca8 	.word	0x08004ca8

08002cb4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002cc2:	f7ff ff01 	bl	8002ac8 <LL_RCC_PLL_GetMainSource>
 8002cc6:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d004      	beq.n	8002cd8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd4:	d003      	beq.n	8002cde <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002cd6:	e005      	b.n	8002ce4 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	@ (8002d28 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002cda:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002cdc:	e005      	b.n	8002cea <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002cde:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002ce0:	60fb      	str	r3, [r7, #12]
      break;
 8002ce2:	e002      	b.n	8002cea <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8002ce4:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002ce6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8002ce8:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8002cea:	f7ff ff09 	bl	8002b00 <LL_RCC_PLL_GetPrediv>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	fbb2 f4f3 	udiv	r4, r2, r3
 8002cf8:	f7ff fef4 	bl	8002ae4 <LL_RCC_PLL_GetMultiplicator>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002d02:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002d06:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	fa92 f2a2 	rbit	r2, r2
 8002d0e:	603a      	str	r2, [r7, #0]
  return result;
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	fab2 f282 	clz	r2, r2
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	40d3      	lsrs	r3, r2
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd90      	pop	{r4, r7, pc}
 8002d28:	003d0900 	.word	0x003d0900
 8002d2c:	007a1200 	.word	0x007a1200

08002d30 <LL_USART_IsEnabled>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d101      	bne.n	8002d48 <LL_USART_IsEnabled+0x18>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <LL_USART_IsEnabled+0x1a>
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <LL_USART_SetStopBitsLength>:
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	605a      	str	r2, [r3, #4]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_USART_SetHWFlowCtrl>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	609a      	str	r2, [r3, #8]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_USART_SetBaudRate>:
{
 8002da2:	b480      	push	{r7}
 8002da4:	b087      	sub	sp, #28
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002db6:	d11a      	bne.n	8002dee <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	005a      	lsls	r2, r3, #1
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	441a      	add	r2, r3
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	085b      	lsrs	r3, r3, #1
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	60da      	str	r2, [r3, #12]
}
 8002dec:	e00a      	b.n	8002e04 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	085a      	lsrs	r2, r3, #1
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	441a      	add	r2, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	60da      	str	r2, [r3, #12]
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff ff84 	bl	8002d30 <LL_USART_IsEnabled>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d14e      	bne.n	8002ecc <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4b29      	ldr	r3, [pc, #164]	@ (8002ed8 <LL_USART_Init+0xc8>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	6851      	ldr	r1, [r2, #4]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	68d2      	ldr	r2, [r2, #12]
 8002e3e:	4311      	orrs	r1, r2
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	6912      	ldr	r2, [r2, #16]
 8002e44:	4311      	orrs	r1, r2
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	6992      	ldr	r2, [r2, #24]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4619      	mov	r1, r3
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff7c 	bl	8002d56 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4619      	mov	r1, r3
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff89 	bl	8002d7c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002edc <LL_USART_Init+0xcc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d104      	bne.n	8002e7c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7ff fe78 	bl	8002b68 <LL_RCC_GetUSARTClockFreq>
 8002e78:	61b8      	str	r0, [r7, #24]
 8002e7a:	e016      	b.n	8002eaa <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <LL_USART_Init+0xd0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d107      	bne.n	8002e94 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002e84:	f107 0308 	add.w	r3, r7, #8
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fe47 	bl	8002b1c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	e00a      	b.n	8002eaa <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a13      	ldr	r2, [pc, #76]	@ (8002ee4 <LL_USART_Init+0xd4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d106      	bne.n	8002eaa <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8002e9c:	f107 0308 	add.w	r3, r7, #8
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fe3b 	bl	8002b1c <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d009      	beq.n	8002ecc <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002ec4:	69b9      	ldr	r1, [r7, #24]
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ff6b 	bl	8002da2 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002ecc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	efff69f3 	.word	0xefff69f3
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40004400 	.word	0x40004400
 8002ee4:	40004800 	.word	0x40004800

08002ee8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efa:	4a07      	ldr	r2, [pc, #28]	@ (8002f18 <LL_InitTick+0x30>)
 8002efc:	3b01      	subs	r3, #1
 8002efe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002f00:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <LL_InitTick+0x30>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f06:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <LL_InitTick+0x30>)
 8002f08:	2205      	movs	r2, #5
 8002f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	e000e010 	.word	0xe000e010

08002f1c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002f24:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ffdd 	bl	8002ee8 <LL_InitTick>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002f40:	4b0f      	ldr	r3, [pc, #60]	@ (8002f80 <LL_mDelay+0x48>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002f46:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d00c      	beq.n	8002f6a <LL_mDelay+0x32>
  {
    Delay++;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3301      	adds	r3, #1
 8002f54:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002f56:	e008      	b.n	8002f6a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002f58:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <LL_mDelay+0x48>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d002      	beq.n	8002f6a <LL_mDelay+0x32>
    {
      Delay--;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3b01      	subs	r3, #1
 8002f68:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f3      	bne.n	8002f58 <LL_mDelay+0x20>
    }
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002f8c:	4a04      	ldr	r2, [pc, #16]	@ (8002fa0 <LL_SetSystemCoreClock+0x1c>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6013      	str	r3, [r2, #0]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000000 	.word	0x20000000

08002fa4 <HTS221_read_bytes>:
float HTS221_TemperatureSlope;
float HTS221_TemperatureZero;
//uint8_t HTS221_address = YOUR_DEFAULT_ADDRESS; // Replace with the actual default address

// Read multiple bytes
void HTS221_read_bytes(uint8_t reg_addr, uint8_t* values, size_t length) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	4603      	mov	r3, r0
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	73fb      	strb	r3, [r7, #15]
    i2c_master_read(values, length, reg_addr, HTS221_address, 1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	b2d9      	uxtb	r1, r3
 8002fb6:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <HTS221_read_bytes+0x2c>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	9000      	str	r0, [sp, #0]
 8002fc0:	68b8      	ldr	r0, [r7, #8]
 8002fc2:	f7fe f96d 	bl	80012a0 <i2c_master_read>
    // Added a delay or a check for 'end_of_read_flag' to ensure data has been read before proceeding

}
 8002fc6:	bf00      	nop
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000004 	.word	0x20000004

08002fd4 <HTS221_write_bytes>:

// Write multiple bytes
void HTS221_write_bytes(uint8_t reg_addr, uint8_t* values, size_t length) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	4603      	mov	r3, r0
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	73fb      	strb	r3, [r7, #15]
    i2c_master_write_multi(values, length, reg_addr, HTS221_address, 0);
 8002fe2:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HTS221_write_bytes+0x28>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	7bfa      	ldrb	r2, [r7, #15]
 8002fe8:	2100      	movs	r1, #0
 8002fea:	9100      	str	r1, [sp, #0]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	68b8      	ldr	r0, [r7, #8]
 8002ff0:	f7fe f90a 	bl	8001208 <i2c_master_write_multi>
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000004 	.word	0x20000004

08003000 <HTS221_init>:

void HTS221_init(void) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
    uint8_t whoAmI;

    HTS221_read_bytes(HTS221_WHO_AM_I_ADDRESS, &whoAmI, 1);
 8003006:	1dfb      	adds	r3, r7, #7
 8003008:	2201      	movs	r2, #1
 800300a:	4619      	mov	r1, r3
 800300c:	200f      	movs	r0, #15
 800300e:	f7ff ffc9 	bl	8002fa4 <HTS221_read_bytes>

    if (!(whoAmI == HTS221_WHO_AM_I_VALUE)) {
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	2bbc      	cmp	r3, #188	@ 0xbc
 8003016:	d008      	beq.n	800302a <HTS221_init+0x2a>
    	HTS221_address = HTS221_DEVICE_ADDRESS_1;
 8003018:	4b0c      	ldr	r3, [pc, #48]	@ (800304c <HTS221_init+0x4c>)
 800301a:	22bf      	movs	r2, #191	@ 0xbf
 800301c:	701a      	strb	r2, [r3, #0]
    	HTS221_read_bytes(HTS221_WHO_AM_I_ADDRESS, &whoAmI, 1);
 800301e:	1dfb      	adds	r3, r7, #7
 8003020:	2201      	movs	r2, #1
 8003022:	4619      	mov	r1, r3
 8003024:	200f      	movs	r0, #15
 8003026:	f7ff ffbd 	bl	8002fa4 <HTS221_read_bytes>
    }

    uint8_t ctrl_setting = 134;
 800302a:	2386      	movs	r3, #134	@ 0x86
 800302c:	71bb      	strb	r3, [r7, #6]
    HTS221_write_bytes(HTS221_CTRL1, &ctrl_setting, 1);
 800302e:	1dbb      	adds	r3, r7, #6
 8003030:	2201      	movs	r2, #1
 8003032:	4619      	mov	r1, r3
 8003034:	2020      	movs	r0, #32
 8003036:	f7ff ffcd 	bl	8002fd4 <HTS221_write_bytes>

    HTS221_get_humidity_calibration();
 800303a:	f000 f809 	bl	8003050 <HTS221_get_humidity_calibration>
    HTS221_get_temperature_calibration();
 800303e:	f000 f891 	bl	8003164 <HTS221_get_temperature_calibration>


}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000004 	.word	0x20000004

08003050 <HTS221_get_humidity_calibration>:

void HTS221_get_humidity_calibration(void) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
    uint8_t calibration_data[2]; // Buffer to hold H0_rH and H1_rH
    uint8_t h0T0Out_data[2], h1T0Out_data[2]; // Buffers to hold the H0_T0_OUT and H1_T0_OUT
    int16_t h0_t0_out, h1_t0_out;

    // Read H0_rH and H1_rH together with auto-increment
    HTS221_read_bytes(HTS221_H0_rH_x2 | 0x80, calibration_data, 2);
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	2202      	movs	r2, #2
 800305c:	4619      	mov	r1, r3
 800305e:	20b0      	movs	r0, #176	@ 0xb0
 8003060:	f7ff ffa0 	bl	8002fa4 <HTS221_read_bytes>

    // Extract the H0_rH and H1_rH values
    uint8_t h0_rH = calibration_data[0] >> 1; // H0_rH is stored as (value / 2)
 8003064:	7a3b      	ldrb	r3, [r7, #8]
 8003066:	085b      	lsrs	r3, r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
    uint8_t h1_rH = calibration_data[1] >> 1; // H1_rH is stored as (value / 2)
 800306a:	7a7b      	ldrb	r3, [r7, #9]
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	73bb      	strb	r3, [r7, #14]

    // Read H0_T0_OUT and H1_T0_OUT together with auto-increment
    HTS221_read_bytes(HTS221_H0_T0_OUT_H | 0x80, h0T0Out_data, 2);
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	2202      	movs	r2, #2
 8003074:	4619      	mov	r1, r3
 8003076:	20b7      	movs	r0, #183	@ 0xb7
 8003078:	f7ff ff94 	bl	8002fa4 <HTS221_read_bytes>
    HTS221_read_bytes(HTS221_H0_T0_OUT_L | 0x80, h1T0Out_data, 2);
 800307c:	463b      	mov	r3, r7
 800307e:	2202      	movs	r2, #2
 8003080:	4619      	mov	r1, r3
 8003082:	20b6      	movs	r0, #182	@ 0xb6
 8003084:	f7ff ff8e 	bl	8002fa4 <HTS221_read_bytes>

    // Combine the bytes into the H0_T0_OUT and H1_T0_OUT values
    h0_t0_out = (int16_t)((uint16_t)h0T0Out_data[1] << 8 | (uint16_t)h0T0Out_data[0]);
 8003088:	797b      	ldrb	r3, [r7, #5]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	b21a      	sxth	r2, r3
 800308e:	793b      	ldrb	r3, [r7, #4]
 8003090:	b21b      	sxth	r3, r3
 8003092:	4313      	orrs	r3, r2
 8003094:	81bb      	strh	r3, [r7, #12]
    h1_t0_out = (int16_t)((uint16_t)h1T0Out_data[1] << 8 | (uint16_t)h1T0Out_data[0]);
 8003096:	787b      	ldrb	r3, [r7, #1]
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	b21a      	sxth	r2, r3
 800309c:	783b      	ldrb	r3, [r7, #0]
 800309e:	b21b      	sxth	r3, r3
 80030a0:	4313      	orrs	r3, r2
 80030a2:	817b      	strh	r3, [r7, #10]

    // Calculate the humidity calibration slope and zero intercept
    HTS221_HumiditySlope = (float)(h1_rH - h0_rH) / (h1_t0_out - h0_t0_out);
 80030a4:	7bba      	ldrb	r2, [r7, #14]
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80030b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003100 <HTS221_get_humidity_calibration+0xb0>)
 80030ca:	edc3 7a00 	vstr	s15, [r3]
    HTS221_HumidityZero = h0_rH - HTS221_HumiditySlope * h0_t0_out;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	ee07 3a90 	vmov	s15, r3
 80030d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80030e4:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <HTS221_get_humidity_calibration+0xb0>)
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f2:	4b04      	ldr	r3, [pc, #16]	@ (8003104 <HTS221_get_humidity_calibration+0xb4>)
 80030f4:	edc3 7a00 	vstr	s15, [r3]
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000120 	.word	0x20000120
 8003104:	20000124 	.word	0x20000124

08003108 <HTS221_get_humidity>:

void HTS221_get_humidity(float* humidity_out) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
    uint8_t h_out_data[2];
    int16_t h_out;

    HTS221_read_bytes(HTS221_HUMIDITY_OUT_L, h_out_data, 2);
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	2202      	movs	r2, #2
 8003116:	4619      	mov	r1, r3
 8003118:	2028      	movs	r0, #40	@ 0x28
 800311a:	f7ff ff43 	bl	8002fa4 <HTS221_read_bytes>
    h_out = h_out_data[0] | (h_out_data[1] << 8);
 800311e:	7b3b      	ldrb	r3, [r7, #12]
 8003120:	b21a      	sxth	r2, r3
 8003122:	7b7b      	ldrb	r3, [r7, #13]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	b21b      	sxth	r3, r3
 8003128:	4313      	orrs	r3, r2
 800312a:	81fb      	strh	r3, [r7, #14]

    *humidity_out = (h_out * HTS221_HumiditySlope + HTS221_HumidityZero);
 800312c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003138:	4b08      	ldr	r3, [pc, #32]	@ (800315c <HTS221_get_humidity+0x54>)
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003142:	4b07      	ldr	r3, [pc, #28]	@ (8003160 <HTS221_get_humidity+0x58>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	edc3 7a00 	vstr	s15, [r3]
}
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000120 	.word	0x20000120
 8003160:	20000124 	.word	0x20000124

08003164 <HTS221_get_temperature_calibration>:




void HTS221_get_temperature_calibration(void) {
 8003164:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
    uint8_t t_out_data[4]; // Buffer to hold T0_OUT/T1_OUT calibration values
    int16_t t0_out, t1_out;
    uint16_t t0_degC, t1_degC;

    // Read T0_degC, T1_degC and MSB bits together with auto-increment
    HTS221_read_bytes(HTS221_T0_degC_x8 | 0x80, calibration_data, 4);
 800316c:	1d3b      	adds	r3, r7, #4
 800316e:	2204      	movs	r2, #4
 8003170:	4619      	mov	r1, r3
 8003172:	20b2      	movs	r0, #178	@ 0xb2
 8003174:	f7ff ff16 	bl	8002fa4 <HTS221_read_bytes>

    // Extract the calibration values
    t0_degC = ((uint16_t)(calibration_data[0]) | ((uint16_t)(calibration_data[2] & 0x03) << 8));
 8003178:	793b      	ldrb	r3, [r7, #4]
 800317a:	b21a      	sxth	r2, r3
 800317c:	79bb      	ldrb	r3, [r7, #6]
 800317e:	021b      	lsls	r3, r3, #8
 8003180:	b21b      	sxth	r3, r3
 8003182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003186:	b21b      	sxth	r3, r3
 8003188:	4313      	orrs	r3, r2
 800318a:	b21b      	sxth	r3, r3
 800318c:	81fb      	strh	r3, [r7, #14]
        t1_degC = ((uint16_t)(calibration_data[1]) | ((uint16_t)(calibration_data[2] & 0x0C) << 8));
 800318e:	797b      	ldrb	r3, [r7, #5]
 8003190:	b21a      	sxth	r2, r3
 8003192:	79bb      	ldrb	r3, [r7, #6]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	b21b      	sxth	r3, r3
 8003198:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800319c:	b21b      	sxth	r3, r3
 800319e:	4313      	orrs	r3, r2
 80031a0:	b21b      	sxth	r3, r3
 80031a2:	81bb      	strh	r3, [r7, #12]

    // Read T0_OUT and T1_OUT together with auto-increment
    HTS221_read_bytes(HTS221_T0_OUT_L | 0x80, t_out_data, 4);
 80031a4:	463b      	mov	r3, r7
 80031a6:	2204      	movs	r2, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	20bc      	movs	r0, #188	@ 0xbc
 80031ac:	f7ff fefa 	bl	8002fa4 <HTS221_read_bytes>

    // Combine the bytes into the T0_OUT and T1_OUT values
    t0_out = (int16_t)(t_out_data[1] << 8 | t_out_data[0]);
 80031b0:	787b      	ldrb	r3, [r7, #1]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	b21a      	sxth	r2, r3
 80031b6:	783b      	ldrb	r3, [r7, #0]
 80031b8:	b21b      	sxth	r3, r3
 80031ba:	4313      	orrs	r3, r2
 80031bc:	817b      	strh	r3, [r7, #10]
    t1_out = (int16_t)(t_out_data[3] << 8 | t_out_data[2]);
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	b21a      	sxth	r2, r3
 80031c4:	78bb      	ldrb	r3, [r7, #2]
 80031c6:	b21b      	sxth	r3, r3
 80031c8:	4313      	orrs	r3, r2
 80031ca:	813b      	strh	r3, [r7, #8]

    // Calculate the temperature calibration slope and intercept using the calibration values
    HTS221_TemperatureSlope = (t1_degC - t0_degC) / (8.0 * t1_out - t0_out);
 80031cc:	89ba      	ldrh	r2, [r7, #12]
 80031ce:	89fb      	ldrh	r3, [r7, #14]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd f99e 	bl	8000514 <__aeabi_i2d>
 80031d8:	4604      	mov	r4, r0
 80031da:	460d      	mov	r5, r1
 80031dc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f997 	bl	8000514 <__aeabi_i2d>
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003294 <HTS221_get_temperature_calibration+0x130>)
 80031ec:	f7fd f9fc 	bl	80005e8 <__aeabi_dmul>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4690      	mov	r8, r2
 80031f6:	4699      	mov	r9, r3
 80031f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd f989 	bl	8000514 <__aeabi_i2d>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4640      	mov	r0, r8
 8003208:	4649      	mov	r1, r9
 800320a:	f7fd f835 	bl	8000278 <__aeabi_dsub>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4620      	mov	r0, r4
 8003214:	4629      	mov	r1, r5
 8003216:	f7fd fb11 	bl	800083c <__aeabi_ddiv>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4610      	mov	r0, r2
 8003220:	4619      	mov	r1, r3
 8003222:	f7fd fc91 	bl	8000b48 <__aeabi_d2f>
 8003226:	4603      	mov	r3, r0
 8003228:	4a1b      	ldr	r2, [pc, #108]	@ (8003298 <HTS221_get_temperature_calibration+0x134>)
 800322a:	6013      	str	r3, [r2, #0]
    HTS221_TemperatureZero = (t0_degC / 8.0) - HTS221_TemperatureSlope * t0_out;
 800322c:	89fb      	ldrh	r3, [r7, #14]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd f970 	bl	8000514 <__aeabi_i2d>
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	4b16      	ldr	r3, [pc, #88]	@ (8003294 <HTS221_get_temperature_calibration+0x130>)
 800323a:	f7fd faff 	bl	800083c <__aeabi_ddiv>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4614      	mov	r4, r2
 8003244:	461d      	mov	r5, r3
 8003246:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <HTS221_get_temperature_calibration+0x134>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325c:	ee17 0a90 	vmov	r0, s15
 8003260:	f7fd f96a 	bl	8000538 <__aeabi_f2d>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4620      	mov	r0, r4
 800326a:	4629      	mov	r1, r5
 800326c:	f7fd f804 	bl	8000278 <__aeabi_dsub>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	f7fd fc66 	bl	8000b48 <__aeabi_d2f>
 800327c:	4603      	mov	r3, r0
 800327e:	4a07      	ldr	r2, [pc, #28]	@ (800329c <HTS221_get_temperature_calibration+0x138>)
 8003280:	6013      	str	r3, [r2, #0]
LL_mDelay(100);
 8003282:	2064      	movs	r0, #100	@ 0x64
 8003284:	f7ff fe58 	bl	8002f38 <LL_mDelay>
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003292:	bf00      	nop
 8003294:	40200000 	.word	0x40200000
 8003298:	20000128 	.word	0x20000128
 800329c:	2000012c 	.word	0x2000012c

080032a0 <HTS221_get_temperature>:


void HTS221_get_temperature(float* temperature_out) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
    uint8_t t_out_buffer[2]; // Buffer to hold the two temperature bytes
    int16_t t_out;

    // Read both temperature registers at once
    HTS221_read_bytes(HTS221_TEMP_OUT_L | 0x80, t_out_buffer, 2);
 80032a8:	f107 030c 	add.w	r3, r7, #12
 80032ac:	2202      	movs	r2, #2
 80032ae:	4619      	mov	r1, r3
 80032b0:	20aa      	movs	r0, #170	@ 0xaa
 80032b2:	f7ff fe77 	bl	8002fa4 <HTS221_read_bytes>

    // Combine the two bytes into a single 16-bit value
    t_out = (int16_t)((uint16_t)t_out_buffer[1] << 8 | t_out_buffer[0]);
 80032b6:	7b7b      	ldrb	r3, [r7, #13]
 80032b8:	021b      	lsls	r3, r3, #8
 80032ba:	b21a      	sxth	r2, r3
 80032bc:	7b3b      	ldrb	r3, [r7, #12]
 80032be:	b21b      	sxth	r3, r3
 80032c0:	4313      	orrs	r3, r2
 80032c2:	81fb      	strh	r3, [r7, #14]

    // Calculate the temperature in Celsius
    *temperature_out = (t_out * -HTS221_TemperatureSlope) + HTS221_TemperatureZero;
 80032c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032c8:	ee07 3a90 	vmov	s15, r3
 80032cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032d0:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <HTS221_get_temperature+0x58>)
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	eef1 7a67 	vneg.f32	s15, s15
 80032da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032de:	4b07      	ldr	r3, [pc, #28]	@ (80032fc <HTS221_get_temperature+0x5c>)
 80032e0:	edd3 7a00 	vldr	s15, [r3]
 80032e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	edc3 7a00 	vstr	s15, [r3]
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000128 	.word	0x20000128
 80032fc:	2000012c 	.word	0x2000012c

08003300 <LPS25HB_read_bytes>:
#include "LPS25HB.h"

uint8_t LPS25HB_address = LPS25HB_DEVICE_ADDRESS_0;
uint16_t LPS25HB_PressureOffset;

void LPS25HB_read_bytes(uint8_t reg_addr, uint8_t* values, size_t length) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af02      	add	r7, sp, #8
 8003306:	4603      	mov	r3, r0
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	73fb      	strb	r3, [r7, #15]
    i2c_master_read(values, length, reg_addr, LPS25HB_address, 1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	b2d9      	uxtb	r1, r3
 8003312:	4b07      	ldr	r3, [pc, #28]	@ (8003330 <LPS25HB_read_bytes+0x30>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	2001      	movs	r0, #1
 800331a:	9000      	str	r0, [sp, #0]
 800331c:	68b8      	ldr	r0, [r7, #8]
 800331e:	f7fd ffbf 	bl	80012a0 <i2c_master_read>
    LL_mDelay(5);
 8003322:	2005      	movs	r0, #5
 8003324:	f7ff fe08 	bl	8002f38 <LL_mDelay>

}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	20000005 	.word	0x20000005

08003334 <LPS25HB_write_bytes>:

void LPS25HB_write_bytes(uint8_t reg_addr, uint8_t* values, size_t length) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af02      	add	r7, sp, #8
 800333a:	4603      	mov	r3, r0
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	73fb      	strb	r3, [r7, #15]
    i2c_master_write_multi(values, length, reg_addr, LPS25HB_address, 0);
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <LPS25HB_write_bytes+0x28>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	2100      	movs	r1, #0
 800334a:	9100      	str	r1, [sp, #0]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	68b8      	ldr	r0, [r7, #8]
 8003350:	f7fd ff5a 	bl	8001208 <i2c_master_write_multi>
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000005 	.word	0x20000005

08003360 <LPS25HB_init>:


void LPS25HB_init() {
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
    uint8_t whoAmI = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	71fb      	strb	r3, [r7, #7]
    LPS25HB_read_bytes(LPS25HB_WHO_AM_I_ADDRESS, &whoAmI, 1);
 800336a:	1dfb      	adds	r3, r7, #7
 800336c:	2201      	movs	r2, #1
 800336e:	4619      	mov	r1, r3
 8003370:	200f      	movs	r0, #15
 8003372:	f7ff ffc5 	bl	8003300 <LPS25HB_read_bytes>

    if (!(whoAmI == LPS25HB_WHO_AM_I_VALUE)) {
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	2bbd      	cmp	r3, #189	@ 0xbd
 800337a:	d015      	beq.n	80033a8 <LPS25HB_init+0x48>
        LPS25HB_address = LPS25HB_DEVICE_ADDRESS_1;
 800337c:	4b0c      	ldr	r3, [pc, #48]	@ (80033b0 <LPS25HB_init+0x50>)
 800337e:	22ba      	movs	r2, #186	@ 0xba
 8003380:	701a      	strb	r2, [r3, #0]

        LPS25HB_read_bytes(LPS25HB_WHO_AM_I_ADDRESS, &whoAmI, 1);
 8003382:	1dfb      	adds	r3, r7, #7
 8003384:	2201      	movs	r2, #1
 8003386:	4619      	mov	r1, r3
 8003388:	200f      	movs	r0, #15
 800338a:	f7ff ffb9 	bl	8003300 <LPS25HB_read_bytes>
        if (whoAmI == LPS25HB_WHO_AM_I_VALUE) {
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	2bbd      	cmp	r3, #189	@ 0xbd
 8003392:	d109      	bne.n	80033a8 <LPS25HB_init+0x48>
            uint8_t ctrl1 = 148;
 8003394:	2394      	movs	r3, #148	@ 0x94
 8003396:	71bb      	strb	r3, [r7, #6]
            LPS25HB_write_bytes(LPS25HB_ADDRESS_CTRL1, &ctrl1, 1);
 8003398:	1dbb      	adds	r3, r7, #6
 800339a:	2201      	movs	r2, #1
 800339c:	4619      	mov	r1, r3
 800339e:	2020      	movs	r0, #32
 80033a0:	f7ff ffc8 	bl	8003334 <LPS25HB_write_bytes>
            LPS25HB_get_pressure_calibration();
 80033a4:	f000 f806 	bl	80033b4 <LPS25HB_get_pressure_calibration>
        }
    }
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000005 	.word	0x20000005

080033b4 <LPS25HB_get_pressure_calibration>:


void LPS25HB_get_pressure_calibration(void){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
    uint8_t buffer[2];
    // Read two bytes from RPDS_L register with auto-increment to RPDS_H
    LPS25HB_read_bytes(LPS25HB_ADDRESS_RPDS_L | 0x80, buffer, 2);
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	2202      	movs	r2, #2
 80033be:	4619      	mov	r1, r3
 80033c0:	20b9      	movs	r0, #185	@ 0xb9
 80033c2:	f7ff ff9d 	bl	8003300 <LPS25HB_read_bytes>

    // Combine the two bytes into a single 16-bit value
    LPS25HB_PressureOffset = (int16_t)(buffer[0] | (buffer[1] << 8));
 80033c6:	793b      	ldrb	r3, [r7, #4]
 80033c8:	b21a      	sxth	r2, r3
 80033ca:	797b      	ldrb	r3, [r7, #5]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	b21b      	sxth	r3, r3
 80033d0:	4313      	orrs	r3, r2
 80033d2:	b21b      	sxth	r3, r3
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	4b03      	ldr	r3, [pc, #12]	@ (80033e4 <LPS25HB_get_pressure_calibration+0x30>)
 80033d8:	801a      	strh	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20000130 	.word	0x20000130

080033e8 <LPS25HB_get_pressure>:

void LPS25HB_get_pressure(float* pressure) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    uint8_t buffer[3];
    // Read three bytes from PRESS_OUT_XL register with auto-increment to PRESS_OUT_H
    LPS25HB_read_bytes(LPS25HB_ADDRESS_PRESS_OUT_XL | 0x80, buffer, 3);
 80033f0:	f107 0308 	add.w	r3, r7, #8
 80033f4:	2203      	movs	r2, #3
 80033f6:	4619      	mov	r1, r3
 80033f8:	20a8      	movs	r0, #168	@ 0xa8
 80033fa:	f7ff ff81 	bl	8003300 <LPS25HB_read_bytes>

    // Combine the three bytes into a single 24-bit value
    uint32_t p_out = (uint32_t)(buffer[2] << 16) | (buffer[1] << 8) | buffer[0];
 80033fe:	7abb      	ldrb	r3, [r7, #10]
 8003400:	041a      	lsls	r2, r3, #16
 8003402:	7a7b      	ldrb	r3, [r7, #9]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	4313      	orrs	r3, r2
 8003408:	7a3a      	ldrb	r2, [r7, #8]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

    // Calculate the actual pressure value
    *pressure = p_out / 4096.0f;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003418:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8003430 <LPS25HB_get_pressure+0x48>
 800341c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	edc3 7a00 	vstr	s15, [r3]
}
 8003426:	bf00      	nop
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	45800000 	.word	0x45800000

08003434 <siprintf>:
 8003434:	b40e      	push	{r1, r2, r3}
 8003436:	b500      	push	{lr}
 8003438:	b09c      	sub	sp, #112	@ 0x70
 800343a:	ab1d      	add	r3, sp, #116	@ 0x74
 800343c:	9002      	str	r0, [sp, #8]
 800343e:	9006      	str	r0, [sp, #24]
 8003440:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003444:	4809      	ldr	r0, [pc, #36]	@ (800346c <siprintf+0x38>)
 8003446:	9107      	str	r1, [sp, #28]
 8003448:	9104      	str	r1, [sp, #16]
 800344a:	4909      	ldr	r1, [pc, #36]	@ (8003470 <siprintf+0x3c>)
 800344c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003450:	9105      	str	r1, [sp, #20]
 8003452:	6800      	ldr	r0, [r0, #0]
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	a902      	add	r1, sp, #8
 8003458:	f000 f99a 	bl	8003790 <_svfiprintf_r>
 800345c:	9b02      	ldr	r3, [sp, #8]
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	b01c      	add	sp, #112	@ 0x70
 8003464:	f85d eb04 	ldr.w	lr, [sp], #4
 8003468:	b003      	add	sp, #12
 800346a:	4770      	bx	lr
 800346c:	20000008 	.word	0x20000008
 8003470:	ffff0208 	.word	0xffff0208

08003474 <__errno>:
 8003474:	4b01      	ldr	r3, [pc, #4]	@ (800347c <__errno+0x8>)
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000008 	.word	0x20000008

08003480 <__libc_init_array>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	4d0d      	ldr	r5, [pc, #52]	@ (80034b8 <__libc_init_array+0x38>)
 8003484:	4c0d      	ldr	r4, [pc, #52]	@ (80034bc <__libc_init_array+0x3c>)
 8003486:	1b64      	subs	r4, r4, r5
 8003488:	10a4      	asrs	r4, r4, #2
 800348a:	2600      	movs	r6, #0
 800348c:	42a6      	cmp	r6, r4
 800348e:	d109      	bne.n	80034a4 <__libc_init_array+0x24>
 8003490:	4d0b      	ldr	r5, [pc, #44]	@ (80034c0 <__libc_init_array+0x40>)
 8003492:	4c0c      	ldr	r4, [pc, #48]	@ (80034c4 <__libc_init_array+0x44>)
 8003494:	f001 fbc6 	bl	8004c24 <_init>
 8003498:	1b64      	subs	r4, r4, r5
 800349a:	10a4      	asrs	r4, r4, #2
 800349c:	2600      	movs	r6, #0
 800349e:	42a6      	cmp	r6, r4
 80034a0:	d105      	bne.n	80034ae <__libc_init_array+0x2e>
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 80034a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a8:	4798      	blx	r3
 80034aa:	3601      	adds	r6, #1
 80034ac:	e7ee      	b.n	800348c <__libc_init_array+0xc>
 80034ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b2:	4798      	blx	r3
 80034b4:	3601      	adds	r6, #1
 80034b6:	e7f2      	b.n	800349e <__libc_init_array+0x1e>
 80034b8:	08004d28 	.word	0x08004d28
 80034bc:	08004d28 	.word	0x08004d28
 80034c0:	08004d28 	.word	0x08004d28
 80034c4:	08004d2c 	.word	0x08004d2c

080034c8 <__retarget_lock_acquire_recursive>:
 80034c8:	4770      	bx	lr

080034ca <__retarget_lock_release_recursive>:
 80034ca:	4770      	bx	lr

080034cc <memcpy>:
 80034cc:	440a      	add	r2, r1
 80034ce:	4291      	cmp	r1, r2
 80034d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80034d4:	d100      	bne.n	80034d8 <memcpy+0xc>
 80034d6:	4770      	bx	lr
 80034d8:	b510      	push	{r4, lr}
 80034da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034e2:	4291      	cmp	r1, r2
 80034e4:	d1f9      	bne.n	80034da <memcpy+0xe>
 80034e6:	bd10      	pop	{r4, pc}

080034e8 <_free_r>:
 80034e8:	b538      	push	{r3, r4, r5, lr}
 80034ea:	4605      	mov	r5, r0
 80034ec:	2900      	cmp	r1, #0
 80034ee:	d041      	beq.n	8003574 <_free_r+0x8c>
 80034f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034f4:	1f0c      	subs	r4, r1, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	bfb8      	it	lt
 80034fa:	18e4      	addlt	r4, r4, r3
 80034fc:	f000 f8e0 	bl	80036c0 <__malloc_lock>
 8003500:	4a1d      	ldr	r2, [pc, #116]	@ (8003578 <_free_r+0x90>)
 8003502:	6813      	ldr	r3, [r2, #0]
 8003504:	b933      	cbnz	r3, 8003514 <_free_r+0x2c>
 8003506:	6063      	str	r3, [r4, #4]
 8003508:	6014      	str	r4, [r2, #0]
 800350a:	4628      	mov	r0, r5
 800350c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003510:	f000 b8dc 	b.w	80036cc <__malloc_unlock>
 8003514:	42a3      	cmp	r3, r4
 8003516:	d908      	bls.n	800352a <_free_r+0x42>
 8003518:	6820      	ldr	r0, [r4, #0]
 800351a:	1821      	adds	r1, r4, r0
 800351c:	428b      	cmp	r3, r1
 800351e:	bf01      	itttt	eq
 8003520:	6819      	ldreq	r1, [r3, #0]
 8003522:	685b      	ldreq	r3, [r3, #4]
 8003524:	1809      	addeq	r1, r1, r0
 8003526:	6021      	streq	r1, [r4, #0]
 8003528:	e7ed      	b.n	8003506 <_free_r+0x1e>
 800352a:	461a      	mov	r2, r3
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	b10b      	cbz	r3, 8003534 <_free_r+0x4c>
 8003530:	42a3      	cmp	r3, r4
 8003532:	d9fa      	bls.n	800352a <_free_r+0x42>
 8003534:	6811      	ldr	r1, [r2, #0]
 8003536:	1850      	adds	r0, r2, r1
 8003538:	42a0      	cmp	r0, r4
 800353a:	d10b      	bne.n	8003554 <_free_r+0x6c>
 800353c:	6820      	ldr	r0, [r4, #0]
 800353e:	4401      	add	r1, r0
 8003540:	1850      	adds	r0, r2, r1
 8003542:	4283      	cmp	r3, r0
 8003544:	6011      	str	r1, [r2, #0]
 8003546:	d1e0      	bne.n	800350a <_free_r+0x22>
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	6053      	str	r3, [r2, #4]
 800354e:	4408      	add	r0, r1
 8003550:	6010      	str	r0, [r2, #0]
 8003552:	e7da      	b.n	800350a <_free_r+0x22>
 8003554:	d902      	bls.n	800355c <_free_r+0x74>
 8003556:	230c      	movs	r3, #12
 8003558:	602b      	str	r3, [r5, #0]
 800355a:	e7d6      	b.n	800350a <_free_r+0x22>
 800355c:	6820      	ldr	r0, [r4, #0]
 800355e:	1821      	adds	r1, r4, r0
 8003560:	428b      	cmp	r3, r1
 8003562:	bf04      	itt	eq
 8003564:	6819      	ldreq	r1, [r3, #0]
 8003566:	685b      	ldreq	r3, [r3, #4]
 8003568:	6063      	str	r3, [r4, #4]
 800356a:	bf04      	itt	eq
 800356c:	1809      	addeq	r1, r1, r0
 800356e:	6021      	streq	r1, [r4, #0]
 8003570:	6054      	str	r4, [r2, #4]
 8003572:	e7ca      	b.n	800350a <_free_r+0x22>
 8003574:	bd38      	pop	{r3, r4, r5, pc}
 8003576:	bf00      	nop
 8003578:	20000278 	.word	0x20000278

0800357c <sbrk_aligned>:
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	4e0f      	ldr	r6, [pc, #60]	@ (80035bc <sbrk_aligned+0x40>)
 8003580:	460c      	mov	r4, r1
 8003582:	6831      	ldr	r1, [r6, #0]
 8003584:	4605      	mov	r5, r0
 8003586:	b911      	cbnz	r1, 800358e <sbrk_aligned+0x12>
 8003588:	f000 fba6 	bl	8003cd8 <_sbrk_r>
 800358c:	6030      	str	r0, [r6, #0]
 800358e:	4621      	mov	r1, r4
 8003590:	4628      	mov	r0, r5
 8003592:	f000 fba1 	bl	8003cd8 <_sbrk_r>
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	d103      	bne.n	80035a2 <sbrk_aligned+0x26>
 800359a:	f04f 34ff 	mov.w	r4, #4294967295
 800359e:	4620      	mov	r0, r4
 80035a0:	bd70      	pop	{r4, r5, r6, pc}
 80035a2:	1cc4      	adds	r4, r0, #3
 80035a4:	f024 0403 	bic.w	r4, r4, #3
 80035a8:	42a0      	cmp	r0, r4
 80035aa:	d0f8      	beq.n	800359e <sbrk_aligned+0x22>
 80035ac:	1a21      	subs	r1, r4, r0
 80035ae:	4628      	mov	r0, r5
 80035b0:	f000 fb92 	bl	8003cd8 <_sbrk_r>
 80035b4:	3001      	adds	r0, #1
 80035b6:	d1f2      	bne.n	800359e <sbrk_aligned+0x22>
 80035b8:	e7ef      	b.n	800359a <sbrk_aligned+0x1e>
 80035ba:	bf00      	nop
 80035bc:	20000274 	.word	0x20000274

080035c0 <_malloc_r>:
 80035c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035c4:	1ccd      	adds	r5, r1, #3
 80035c6:	f025 0503 	bic.w	r5, r5, #3
 80035ca:	3508      	adds	r5, #8
 80035cc:	2d0c      	cmp	r5, #12
 80035ce:	bf38      	it	cc
 80035d0:	250c      	movcc	r5, #12
 80035d2:	2d00      	cmp	r5, #0
 80035d4:	4606      	mov	r6, r0
 80035d6:	db01      	blt.n	80035dc <_malloc_r+0x1c>
 80035d8:	42a9      	cmp	r1, r5
 80035da:	d904      	bls.n	80035e6 <_malloc_r+0x26>
 80035dc:	230c      	movs	r3, #12
 80035de:	6033      	str	r3, [r6, #0]
 80035e0:	2000      	movs	r0, #0
 80035e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036bc <_malloc_r+0xfc>
 80035ea:	f000 f869 	bl	80036c0 <__malloc_lock>
 80035ee:	f8d8 3000 	ldr.w	r3, [r8]
 80035f2:	461c      	mov	r4, r3
 80035f4:	bb44      	cbnz	r4, 8003648 <_malloc_r+0x88>
 80035f6:	4629      	mov	r1, r5
 80035f8:	4630      	mov	r0, r6
 80035fa:	f7ff ffbf 	bl	800357c <sbrk_aligned>
 80035fe:	1c43      	adds	r3, r0, #1
 8003600:	4604      	mov	r4, r0
 8003602:	d158      	bne.n	80036b6 <_malloc_r+0xf6>
 8003604:	f8d8 4000 	ldr.w	r4, [r8]
 8003608:	4627      	mov	r7, r4
 800360a:	2f00      	cmp	r7, #0
 800360c:	d143      	bne.n	8003696 <_malloc_r+0xd6>
 800360e:	2c00      	cmp	r4, #0
 8003610:	d04b      	beq.n	80036aa <_malloc_r+0xea>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	4639      	mov	r1, r7
 8003616:	4630      	mov	r0, r6
 8003618:	eb04 0903 	add.w	r9, r4, r3
 800361c:	f000 fb5c 	bl	8003cd8 <_sbrk_r>
 8003620:	4581      	cmp	r9, r0
 8003622:	d142      	bne.n	80036aa <_malloc_r+0xea>
 8003624:	6821      	ldr	r1, [r4, #0]
 8003626:	1a6d      	subs	r5, r5, r1
 8003628:	4629      	mov	r1, r5
 800362a:	4630      	mov	r0, r6
 800362c:	f7ff ffa6 	bl	800357c <sbrk_aligned>
 8003630:	3001      	adds	r0, #1
 8003632:	d03a      	beq.n	80036aa <_malloc_r+0xea>
 8003634:	6823      	ldr	r3, [r4, #0]
 8003636:	442b      	add	r3, r5
 8003638:	6023      	str	r3, [r4, #0]
 800363a:	f8d8 3000 	ldr.w	r3, [r8]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	bb62      	cbnz	r2, 800369c <_malloc_r+0xdc>
 8003642:	f8c8 7000 	str.w	r7, [r8]
 8003646:	e00f      	b.n	8003668 <_malloc_r+0xa8>
 8003648:	6822      	ldr	r2, [r4, #0]
 800364a:	1b52      	subs	r2, r2, r5
 800364c:	d420      	bmi.n	8003690 <_malloc_r+0xd0>
 800364e:	2a0b      	cmp	r2, #11
 8003650:	d917      	bls.n	8003682 <_malloc_r+0xc2>
 8003652:	1961      	adds	r1, r4, r5
 8003654:	42a3      	cmp	r3, r4
 8003656:	6025      	str	r5, [r4, #0]
 8003658:	bf18      	it	ne
 800365a:	6059      	strne	r1, [r3, #4]
 800365c:	6863      	ldr	r3, [r4, #4]
 800365e:	bf08      	it	eq
 8003660:	f8c8 1000 	streq.w	r1, [r8]
 8003664:	5162      	str	r2, [r4, r5]
 8003666:	604b      	str	r3, [r1, #4]
 8003668:	4630      	mov	r0, r6
 800366a:	f000 f82f 	bl	80036cc <__malloc_unlock>
 800366e:	f104 000b 	add.w	r0, r4, #11
 8003672:	1d23      	adds	r3, r4, #4
 8003674:	f020 0007 	bic.w	r0, r0, #7
 8003678:	1ac2      	subs	r2, r0, r3
 800367a:	bf1c      	itt	ne
 800367c:	1a1b      	subne	r3, r3, r0
 800367e:	50a3      	strne	r3, [r4, r2]
 8003680:	e7af      	b.n	80035e2 <_malloc_r+0x22>
 8003682:	6862      	ldr	r2, [r4, #4]
 8003684:	42a3      	cmp	r3, r4
 8003686:	bf0c      	ite	eq
 8003688:	f8c8 2000 	streq.w	r2, [r8]
 800368c:	605a      	strne	r2, [r3, #4]
 800368e:	e7eb      	b.n	8003668 <_malloc_r+0xa8>
 8003690:	4623      	mov	r3, r4
 8003692:	6864      	ldr	r4, [r4, #4]
 8003694:	e7ae      	b.n	80035f4 <_malloc_r+0x34>
 8003696:	463c      	mov	r4, r7
 8003698:	687f      	ldr	r7, [r7, #4]
 800369a:	e7b6      	b.n	800360a <_malloc_r+0x4a>
 800369c:	461a      	mov	r2, r3
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	42a3      	cmp	r3, r4
 80036a2:	d1fb      	bne.n	800369c <_malloc_r+0xdc>
 80036a4:	2300      	movs	r3, #0
 80036a6:	6053      	str	r3, [r2, #4]
 80036a8:	e7de      	b.n	8003668 <_malloc_r+0xa8>
 80036aa:	230c      	movs	r3, #12
 80036ac:	6033      	str	r3, [r6, #0]
 80036ae:	4630      	mov	r0, r6
 80036b0:	f000 f80c 	bl	80036cc <__malloc_unlock>
 80036b4:	e794      	b.n	80035e0 <_malloc_r+0x20>
 80036b6:	6005      	str	r5, [r0, #0]
 80036b8:	e7d6      	b.n	8003668 <_malloc_r+0xa8>
 80036ba:	bf00      	nop
 80036bc:	20000278 	.word	0x20000278

080036c0 <__malloc_lock>:
 80036c0:	4801      	ldr	r0, [pc, #4]	@ (80036c8 <__malloc_lock+0x8>)
 80036c2:	f7ff bf01 	b.w	80034c8 <__retarget_lock_acquire_recursive>
 80036c6:	bf00      	nop
 80036c8:	20000270 	.word	0x20000270

080036cc <__malloc_unlock>:
 80036cc:	4801      	ldr	r0, [pc, #4]	@ (80036d4 <__malloc_unlock+0x8>)
 80036ce:	f7ff befc 	b.w	80034ca <__retarget_lock_release_recursive>
 80036d2:	bf00      	nop
 80036d4:	20000270 	.word	0x20000270

080036d8 <__ssputs_r>:
 80036d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036dc:	688e      	ldr	r6, [r1, #8]
 80036de:	461f      	mov	r7, r3
 80036e0:	42be      	cmp	r6, r7
 80036e2:	680b      	ldr	r3, [r1, #0]
 80036e4:	4682      	mov	sl, r0
 80036e6:	460c      	mov	r4, r1
 80036e8:	4690      	mov	r8, r2
 80036ea:	d82d      	bhi.n	8003748 <__ssputs_r+0x70>
 80036ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80036f4:	d026      	beq.n	8003744 <__ssputs_r+0x6c>
 80036f6:	6965      	ldr	r5, [r4, #20]
 80036f8:	6909      	ldr	r1, [r1, #16]
 80036fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036fe:	eba3 0901 	sub.w	r9, r3, r1
 8003702:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003706:	1c7b      	adds	r3, r7, #1
 8003708:	444b      	add	r3, r9
 800370a:	106d      	asrs	r5, r5, #1
 800370c:	429d      	cmp	r5, r3
 800370e:	bf38      	it	cc
 8003710:	461d      	movcc	r5, r3
 8003712:	0553      	lsls	r3, r2, #21
 8003714:	d527      	bpl.n	8003766 <__ssputs_r+0x8e>
 8003716:	4629      	mov	r1, r5
 8003718:	f7ff ff52 	bl	80035c0 <_malloc_r>
 800371c:	4606      	mov	r6, r0
 800371e:	b360      	cbz	r0, 800377a <__ssputs_r+0xa2>
 8003720:	6921      	ldr	r1, [r4, #16]
 8003722:	464a      	mov	r2, r9
 8003724:	f7ff fed2 	bl	80034cc <memcpy>
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800372e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003732:	81a3      	strh	r3, [r4, #12]
 8003734:	6126      	str	r6, [r4, #16]
 8003736:	6165      	str	r5, [r4, #20]
 8003738:	444e      	add	r6, r9
 800373a:	eba5 0509 	sub.w	r5, r5, r9
 800373e:	6026      	str	r6, [r4, #0]
 8003740:	60a5      	str	r5, [r4, #8]
 8003742:	463e      	mov	r6, r7
 8003744:	42be      	cmp	r6, r7
 8003746:	d900      	bls.n	800374a <__ssputs_r+0x72>
 8003748:	463e      	mov	r6, r7
 800374a:	6820      	ldr	r0, [r4, #0]
 800374c:	4632      	mov	r2, r6
 800374e:	4641      	mov	r1, r8
 8003750:	f000 faa8 	bl	8003ca4 <memmove>
 8003754:	68a3      	ldr	r3, [r4, #8]
 8003756:	1b9b      	subs	r3, r3, r6
 8003758:	60a3      	str	r3, [r4, #8]
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	4433      	add	r3, r6
 800375e:	6023      	str	r3, [r4, #0]
 8003760:	2000      	movs	r0, #0
 8003762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003766:	462a      	mov	r2, r5
 8003768:	f000 fac6 	bl	8003cf8 <_realloc_r>
 800376c:	4606      	mov	r6, r0
 800376e:	2800      	cmp	r0, #0
 8003770:	d1e0      	bne.n	8003734 <__ssputs_r+0x5c>
 8003772:	6921      	ldr	r1, [r4, #16]
 8003774:	4650      	mov	r0, sl
 8003776:	f7ff feb7 	bl	80034e8 <_free_r>
 800377a:	230c      	movs	r3, #12
 800377c:	f8ca 3000 	str.w	r3, [sl]
 8003780:	89a3      	ldrh	r3, [r4, #12]
 8003782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003786:	81a3      	strh	r3, [r4, #12]
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	e7e9      	b.n	8003762 <__ssputs_r+0x8a>
	...

08003790 <_svfiprintf_r>:
 8003790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003794:	4698      	mov	r8, r3
 8003796:	898b      	ldrh	r3, [r1, #12]
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	b09d      	sub	sp, #116	@ 0x74
 800379c:	4607      	mov	r7, r0
 800379e:	460d      	mov	r5, r1
 80037a0:	4614      	mov	r4, r2
 80037a2:	d510      	bpl.n	80037c6 <_svfiprintf_r+0x36>
 80037a4:	690b      	ldr	r3, [r1, #16]
 80037a6:	b973      	cbnz	r3, 80037c6 <_svfiprintf_r+0x36>
 80037a8:	2140      	movs	r1, #64	@ 0x40
 80037aa:	f7ff ff09 	bl	80035c0 <_malloc_r>
 80037ae:	6028      	str	r0, [r5, #0]
 80037b0:	6128      	str	r0, [r5, #16]
 80037b2:	b930      	cbnz	r0, 80037c2 <_svfiprintf_r+0x32>
 80037b4:	230c      	movs	r3, #12
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	b01d      	add	sp, #116	@ 0x74
 80037be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037c2:	2340      	movs	r3, #64	@ 0x40
 80037c4:	616b      	str	r3, [r5, #20]
 80037c6:	2300      	movs	r3, #0
 80037c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80037ca:	2320      	movs	r3, #32
 80037cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80037d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80037d4:	2330      	movs	r3, #48	@ 0x30
 80037d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003974 <_svfiprintf_r+0x1e4>
 80037da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80037de:	f04f 0901 	mov.w	r9, #1
 80037e2:	4623      	mov	r3, r4
 80037e4:	469a      	mov	sl, r3
 80037e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037ea:	b10a      	cbz	r2, 80037f0 <_svfiprintf_r+0x60>
 80037ec:	2a25      	cmp	r2, #37	@ 0x25
 80037ee:	d1f9      	bne.n	80037e4 <_svfiprintf_r+0x54>
 80037f0:	ebba 0b04 	subs.w	fp, sl, r4
 80037f4:	d00b      	beq.n	800380e <_svfiprintf_r+0x7e>
 80037f6:	465b      	mov	r3, fp
 80037f8:	4622      	mov	r2, r4
 80037fa:	4629      	mov	r1, r5
 80037fc:	4638      	mov	r0, r7
 80037fe:	f7ff ff6b 	bl	80036d8 <__ssputs_r>
 8003802:	3001      	adds	r0, #1
 8003804:	f000 80a7 	beq.w	8003956 <_svfiprintf_r+0x1c6>
 8003808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800380a:	445a      	add	r2, fp
 800380c:	9209      	str	r2, [sp, #36]	@ 0x24
 800380e:	f89a 3000 	ldrb.w	r3, [sl]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f000 809f 	beq.w	8003956 <_svfiprintf_r+0x1c6>
 8003818:	2300      	movs	r3, #0
 800381a:	f04f 32ff 	mov.w	r2, #4294967295
 800381e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003822:	f10a 0a01 	add.w	sl, sl, #1
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	9307      	str	r3, [sp, #28]
 800382a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800382e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003830:	4654      	mov	r4, sl
 8003832:	2205      	movs	r2, #5
 8003834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003838:	484e      	ldr	r0, [pc, #312]	@ (8003974 <_svfiprintf_r+0x1e4>)
 800383a:	f7fc fcc9 	bl	80001d0 <memchr>
 800383e:	9a04      	ldr	r2, [sp, #16]
 8003840:	b9d8      	cbnz	r0, 800387a <_svfiprintf_r+0xea>
 8003842:	06d0      	lsls	r0, r2, #27
 8003844:	bf44      	itt	mi
 8003846:	2320      	movmi	r3, #32
 8003848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800384c:	0711      	lsls	r1, r2, #28
 800384e:	bf44      	itt	mi
 8003850:	232b      	movmi	r3, #43	@ 0x2b
 8003852:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003856:	f89a 3000 	ldrb.w	r3, [sl]
 800385a:	2b2a      	cmp	r3, #42	@ 0x2a
 800385c:	d015      	beq.n	800388a <_svfiprintf_r+0xfa>
 800385e:	9a07      	ldr	r2, [sp, #28]
 8003860:	4654      	mov	r4, sl
 8003862:	2000      	movs	r0, #0
 8003864:	f04f 0c0a 	mov.w	ip, #10
 8003868:	4621      	mov	r1, r4
 800386a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800386e:	3b30      	subs	r3, #48	@ 0x30
 8003870:	2b09      	cmp	r3, #9
 8003872:	d94b      	bls.n	800390c <_svfiprintf_r+0x17c>
 8003874:	b1b0      	cbz	r0, 80038a4 <_svfiprintf_r+0x114>
 8003876:	9207      	str	r2, [sp, #28]
 8003878:	e014      	b.n	80038a4 <_svfiprintf_r+0x114>
 800387a:	eba0 0308 	sub.w	r3, r0, r8
 800387e:	fa09 f303 	lsl.w	r3, r9, r3
 8003882:	4313      	orrs	r3, r2
 8003884:	9304      	str	r3, [sp, #16]
 8003886:	46a2      	mov	sl, r4
 8003888:	e7d2      	b.n	8003830 <_svfiprintf_r+0xa0>
 800388a:	9b03      	ldr	r3, [sp, #12]
 800388c:	1d19      	adds	r1, r3, #4
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	9103      	str	r1, [sp, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	bfbb      	ittet	lt
 8003896:	425b      	neglt	r3, r3
 8003898:	f042 0202 	orrlt.w	r2, r2, #2
 800389c:	9307      	strge	r3, [sp, #28]
 800389e:	9307      	strlt	r3, [sp, #28]
 80038a0:	bfb8      	it	lt
 80038a2:	9204      	strlt	r2, [sp, #16]
 80038a4:	7823      	ldrb	r3, [r4, #0]
 80038a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80038a8:	d10a      	bne.n	80038c0 <_svfiprintf_r+0x130>
 80038aa:	7863      	ldrb	r3, [r4, #1]
 80038ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80038ae:	d132      	bne.n	8003916 <_svfiprintf_r+0x186>
 80038b0:	9b03      	ldr	r3, [sp, #12]
 80038b2:	1d1a      	adds	r2, r3, #4
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	9203      	str	r2, [sp, #12]
 80038b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038bc:	3402      	adds	r4, #2
 80038be:	9305      	str	r3, [sp, #20]
 80038c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003984 <_svfiprintf_r+0x1f4>
 80038c4:	7821      	ldrb	r1, [r4, #0]
 80038c6:	2203      	movs	r2, #3
 80038c8:	4650      	mov	r0, sl
 80038ca:	f7fc fc81 	bl	80001d0 <memchr>
 80038ce:	b138      	cbz	r0, 80038e0 <_svfiprintf_r+0x150>
 80038d0:	9b04      	ldr	r3, [sp, #16]
 80038d2:	eba0 000a 	sub.w	r0, r0, sl
 80038d6:	2240      	movs	r2, #64	@ 0x40
 80038d8:	4082      	lsls	r2, r0
 80038da:	4313      	orrs	r3, r2
 80038dc:	3401      	adds	r4, #1
 80038de:	9304      	str	r3, [sp, #16]
 80038e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038e4:	4824      	ldr	r0, [pc, #144]	@ (8003978 <_svfiprintf_r+0x1e8>)
 80038e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038ea:	2206      	movs	r2, #6
 80038ec:	f7fc fc70 	bl	80001d0 <memchr>
 80038f0:	2800      	cmp	r0, #0
 80038f2:	d036      	beq.n	8003962 <_svfiprintf_r+0x1d2>
 80038f4:	4b21      	ldr	r3, [pc, #132]	@ (800397c <_svfiprintf_r+0x1ec>)
 80038f6:	bb1b      	cbnz	r3, 8003940 <_svfiprintf_r+0x1b0>
 80038f8:	9b03      	ldr	r3, [sp, #12]
 80038fa:	3307      	adds	r3, #7
 80038fc:	f023 0307 	bic.w	r3, r3, #7
 8003900:	3308      	adds	r3, #8
 8003902:	9303      	str	r3, [sp, #12]
 8003904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003906:	4433      	add	r3, r6
 8003908:	9309      	str	r3, [sp, #36]	@ 0x24
 800390a:	e76a      	b.n	80037e2 <_svfiprintf_r+0x52>
 800390c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003910:	460c      	mov	r4, r1
 8003912:	2001      	movs	r0, #1
 8003914:	e7a8      	b.n	8003868 <_svfiprintf_r+0xd8>
 8003916:	2300      	movs	r3, #0
 8003918:	3401      	adds	r4, #1
 800391a:	9305      	str	r3, [sp, #20]
 800391c:	4619      	mov	r1, r3
 800391e:	f04f 0c0a 	mov.w	ip, #10
 8003922:	4620      	mov	r0, r4
 8003924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003928:	3a30      	subs	r2, #48	@ 0x30
 800392a:	2a09      	cmp	r2, #9
 800392c:	d903      	bls.n	8003936 <_svfiprintf_r+0x1a6>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0c6      	beq.n	80038c0 <_svfiprintf_r+0x130>
 8003932:	9105      	str	r1, [sp, #20]
 8003934:	e7c4      	b.n	80038c0 <_svfiprintf_r+0x130>
 8003936:	fb0c 2101 	mla	r1, ip, r1, r2
 800393a:	4604      	mov	r4, r0
 800393c:	2301      	movs	r3, #1
 800393e:	e7f0      	b.n	8003922 <_svfiprintf_r+0x192>
 8003940:	ab03      	add	r3, sp, #12
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	462a      	mov	r2, r5
 8003946:	4b0e      	ldr	r3, [pc, #56]	@ (8003980 <_svfiprintf_r+0x1f0>)
 8003948:	a904      	add	r1, sp, #16
 800394a:	4638      	mov	r0, r7
 800394c:	f3af 8000 	nop.w
 8003950:	1c42      	adds	r2, r0, #1
 8003952:	4606      	mov	r6, r0
 8003954:	d1d6      	bne.n	8003904 <_svfiprintf_r+0x174>
 8003956:	89ab      	ldrh	r3, [r5, #12]
 8003958:	065b      	lsls	r3, r3, #25
 800395a:	f53f af2d 	bmi.w	80037b8 <_svfiprintf_r+0x28>
 800395e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003960:	e72c      	b.n	80037bc <_svfiprintf_r+0x2c>
 8003962:	ab03      	add	r3, sp, #12
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	462a      	mov	r2, r5
 8003968:	4b05      	ldr	r3, [pc, #20]	@ (8003980 <_svfiprintf_r+0x1f0>)
 800396a:	a904      	add	r1, sp, #16
 800396c:	4638      	mov	r0, r7
 800396e:	f000 f879 	bl	8003a64 <_printf_i>
 8003972:	e7ed      	b.n	8003950 <_svfiprintf_r+0x1c0>
 8003974:	08004cb7 	.word	0x08004cb7
 8003978:	08004cc1 	.word	0x08004cc1
 800397c:	00000000 	.word	0x00000000
 8003980:	080036d9 	.word	0x080036d9
 8003984:	08004cbd 	.word	0x08004cbd

08003988 <_printf_common>:
 8003988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800398c:	4616      	mov	r6, r2
 800398e:	4698      	mov	r8, r3
 8003990:	688a      	ldr	r2, [r1, #8]
 8003992:	690b      	ldr	r3, [r1, #16]
 8003994:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003998:	4293      	cmp	r3, r2
 800399a:	bfb8      	it	lt
 800399c:	4613      	movlt	r3, r2
 800399e:	6033      	str	r3, [r6, #0]
 80039a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039a4:	4607      	mov	r7, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	b10a      	cbz	r2, 80039ae <_printf_common+0x26>
 80039aa:	3301      	adds	r3, #1
 80039ac:	6033      	str	r3, [r6, #0]
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	0699      	lsls	r1, r3, #26
 80039b2:	bf42      	ittt	mi
 80039b4:	6833      	ldrmi	r3, [r6, #0]
 80039b6:	3302      	addmi	r3, #2
 80039b8:	6033      	strmi	r3, [r6, #0]
 80039ba:	6825      	ldr	r5, [r4, #0]
 80039bc:	f015 0506 	ands.w	r5, r5, #6
 80039c0:	d106      	bne.n	80039d0 <_printf_common+0x48>
 80039c2:	f104 0a19 	add.w	sl, r4, #25
 80039c6:	68e3      	ldr	r3, [r4, #12]
 80039c8:	6832      	ldr	r2, [r6, #0]
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	42ab      	cmp	r3, r5
 80039ce:	dc26      	bgt.n	8003a1e <_printf_common+0x96>
 80039d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80039d4:	6822      	ldr	r2, [r4, #0]
 80039d6:	3b00      	subs	r3, #0
 80039d8:	bf18      	it	ne
 80039da:	2301      	movne	r3, #1
 80039dc:	0692      	lsls	r2, r2, #26
 80039de:	d42b      	bmi.n	8003a38 <_printf_common+0xb0>
 80039e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80039e4:	4641      	mov	r1, r8
 80039e6:	4638      	mov	r0, r7
 80039e8:	47c8      	blx	r9
 80039ea:	3001      	adds	r0, #1
 80039ec:	d01e      	beq.n	8003a2c <_printf_common+0xa4>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	6922      	ldr	r2, [r4, #16]
 80039f2:	f003 0306 	and.w	r3, r3, #6
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	bf02      	ittt	eq
 80039fa:	68e5      	ldreq	r5, [r4, #12]
 80039fc:	6833      	ldreq	r3, [r6, #0]
 80039fe:	1aed      	subeq	r5, r5, r3
 8003a00:	68a3      	ldr	r3, [r4, #8]
 8003a02:	bf0c      	ite	eq
 8003a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a08:	2500      	movne	r5, #0
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	bfc4      	itt	gt
 8003a0e:	1a9b      	subgt	r3, r3, r2
 8003a10:	18ed      	addgt	r5, r5, r3
 8003a12:	2600      	movs	r6, #0
 8003a14:	341a      	adds	r4, #26
 8003a16:	42b5      	cmp	r5, r6
 8003a18:	d11a      	bne.n	8003a50 <_printf_common+0xc8>
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	e008      	b.n	8003a30 <_printf_common+0xa8>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4652      	mov	r2, sl
 8003a22:	4641      	mov	r1, r8
 8003a24:	4638      	mov	r0, r7
 8003a26:	47c8      	blx	r9
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d103      	bne.n	8003a34 <_printf_common+0xac>
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a34:	3501      	adds	r5, #1
 8003a36:	e7c6      	b.n	80039c6 <_printf_common+0x3e>
 8003a38:	18e1      	adds	r1, r4, r3
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	2030      	movs	r0, #48	@ 0x30
 8003a3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a42:	4422      	add	r2, r4
 8003a44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	e7c7      	b.n	80039e0 <_printf_common+0x58>
 8003a50:	2301      	movs	r3, #1
 8003a52:	4622      	mov	r2, r4
 8003a54:	4641      	mov	r1, r8
 8003a56:	4638      	mov	r0, r7
 8003a58:	47c8      	blx	r9
 8003a5a:	3001      	adds	r0, #1
 8003a5c:	d0e6      	beq.n	8003a2c <_printf_common+0xa4>
 8003a5e:	3601      	adds	r6, #1
 8003a60:	e7d9      	b.n	8003a16 <_printf_common+0x8e>
	...

08003a64 <_printf_i>:
 8003a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a68:	7e0f      	ldrb	r7, [r1, #24]
 8003a6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a6c:	2f78      	cmp	r7, #120	@ 0x78
 8003a6e:	4691      	mov	r9, r2
 8003a70:	4680      	mov	r8, r0
 8003a72:	460c      	mov	r4, r1
 8003a74:	469a      	mov	sl, r3
 8003a76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a7a:	d807      	bhi.n	8003a8c <_printf_i+0x28>
 8003a7c:	2f62      	cmp	r7, #98	@ 0x62
 8003a7e:	d80a      	bhi.n	8003a96 <_printf_i+0x32>
 8003a80:	2f00      	cmp	r7, #0
 8003a82:	f000 80d2 	beq.w	8003c2a <_printf_i+0x1c6>
 8003a86:	2f58      	cmp	r7, #88	@ 0x58
 8003a88:	f000 80b9 	beq.w	8003bfe <_printf_i+0x19a>
 8003a8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a94:	e03a      	b.n	8003b0c <_printf_i+0xa8>
 8003a96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a9a:	2b15      	cmp	r3, #21
 8003a9c:	d8f6      	bhi.n	8003a8c <_printf_i+0x28>
 8003a9e:	a101      	add	r1, pc, #4	@ (adr r1, 8003aa4 <_printf_i+0x40>)
 8003aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003aa4:	08003afd 	.word	0x08003afd
 8003aa8:	08003b11 	.word	0x08003b11
 8003aac:	08003a8d 	.word	0x08003a8d
 8003ab0:	08003a8d 	.word	0x08003a8d
 8003ab4:	08003a8d 	.word	0x08003a8d
 8003ab8:	08003a8d 	.word	0x08003a8d
 8003abc:	08003b11 	.word	0x08003b11
 8003ac0:	08003a8d 	.word	0x08003a8d
 8003ac4:	08003a8d 	.word	0x08003a8d
 8003ac8:	08003a8d 	.word	0x08003a8d
 8003acc:	08003a8d 	.word	0x08003a8d
 8003ad0:	08003c11 	.word	0x08003c11
 8003ad4:	08003b3b 	.word	0x08003b3b
 8003ad8:	08003bcb 	.word	0x08003bcb
 8003adc:	08003a8d 	.word	0x08003a8d
 8003ae0:	08003a8d 	.word	0x08003a8d
 8003ae4:	08003c33 	.word	0x08003c33
 8003ae8:	08003a8d 	.word	0x08003a8d
 8003aec:	08003b3b 	.word	0x08003b3b
 8003af0:	08003a8d 	.word	0x08003a8d
 8003af4:	08003a8d 	.word	0x08003a8d
 8003af8:	08003bd3 	.word	0x08003bd3
 8003afc:	6833      	ldr	r3, [r6, #0]
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6032      	str	r2, [r6, #0]
 8003b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e09d      	b.n	8003c4c <_printf_i+0x1e8>
 8003b10:	6833      	ldr	r3, [r6, #0]
 8003b12:	6820      	ldr	r0, [r4, #0]
 8003b14:	1d19      	adds	r1, r3, #4
 8003b16:	6031      	str	r1, [r6, #0]
 8003b18:	0606      	lsls	r6, r0, #24
 8003b1a:	d501      	bpl.n	8003b20 <_printf_i+0xbc>
 8003b1c:	681d      	ldr	r5, [r3, #0]
 8003b1e:	e003      	b.n	8003b28 <_printf_i+0xc4>
 8003b20:	0645      	lsls	r5, r0, #25
 8003b22:	d5fb      	bpl.n	8003b1c <_printf_i+0xb8>
 8003b24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b28:	2d00      	cmp	r5, #0
 8003b2a:	da03      	bge.n	8003b34 <_printf_i+0xd0>
 8003b2c:	232d      	movs	r3, #45	@ 0x2d
 8003b2e:	426d      	negs	r5, r5
 8003b30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b34:	4859      	ldr	r0, [pc, #356]	@ (8003c9c <_printf_i+0x238>)
 8003b36:	230a      	movs	r3, #10
 8003b38:	e011      	b.n	8003b5e <_printf_i+0xfa>
 8003b3a:	6821      	ldr	r1, [r4, #0]
 8003b3c:	6833      	ldr	r3, [r6, #0]
 8003b3e:	0608      	lsls	r0, r1, #24
 8003b40:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b44:	d402      	bmi.n	8003b4c <_printf_i+0xe8>
 8003b46:	0649      	lsls	r1, r1, #25
 8003b48:	bf48      	it	mi
 8003b4a:	b2ad      	uxthmi	r5, r5
 8003b4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b4e:	4853      	ldr	r0, [pc, #332]	@ (8003c9c <_printf_i+0x238>)
 8003b50:	6033      	str	r3, [r6, #0]
 8003b52:	bf14      	ite	ne
 8003b54:	230a      	movne	r3, #10
 8003b56:	2308      	moveq	r3, #8
 8003b58:	2100      	movs	r1, #0
 8003b5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b5e:	6866      	ldr	r6, [r4, #4]
 8003b60:	60a6      	str	r6, [r4, #8]
 8003b62:	2e00      	cmp	r6, #0
 8003b64:	bfa2      	ittt	ge
 8003b66:	6821      	ldrge	r1, [r4, #0]
 8003b68:	f021 0104 	bicge.w	r1, r1, #4
 8003b6c:	6021      	strge	r1, [r4, #0]
 8003b6e:	b90d      	cbnz	r5, 8003b74 <_printf_i+0x110>
 8003b70:	2e00      	cmp	r6, #0
 8003b72:	d04b      	beq.n	8003c0c <_printf_i+0x1a8>
 8003b74:	4616      	mov	r6, r2
 8003b76:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b7a:	fb03 5711 	mls	r7, r3, r1, r5
 8003b7e:	5dc7      	ldrb	r7, [r0, r7]
 8003b80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b84:	462f      	mov	r7, r5
 8003b86:	42bb      	cmp	r3, r7
 8003b88:	460d      	mov	r5, r1
 8003b8a:	d9f4      	bls.n	8003b76 <_printf_i+0x112>
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d10b      	bne.n	8003ba8 <_printf_i+0x144>
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	07df      	lsls	r7, r3, #31
 8003b94:	d508      	bpl.n	8003ba8 <_printf_i+0x144>
 8003b96:	6923      	ldr	r3, [r4, #16]
 8003b98:	6861      	ldr	r1, [r4, #4]
 8003b9a:	4299      	cmp	r1, r3
 8003b9c:	bfde      	ittt	le
 8003b9e:	2330      	movle	r3, #48	@ 0x30
 8003ba0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ba4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ba8:	1b92      	subs	r2, r2, r6
 8003baa:	6122      	str	r2, [r4, #16]
 8003bac:	f8cd a000 	str.w	sl, [sp]
 8003bb0:	464b      	mov	r3, r9
 8003bb2:	aa03      	add	r2, sp, #12
 8003bb4:	4621      	mov	r1, r4
 8003bb6:	4640      	mov	r0, r8
 8003bb8:	f7ff fee6 	bl	8003988 <_printf_common>
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d14a      	bne.n	8003c56 <_printf_i+0x1f2>
 8003bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc4:	b004      	add	sp, #16
 8003bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	f043 0320 	orr.w	r3, r3, #32
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	4833      	ldr	r0, [pc, #204]	@ (8003ca0 <_printf_i+0x23c>)
 8003bd4:	2778      	movs	r7, #120	@ 0x78
 8003bd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	6831      	ldr	r1, [r6, #0]
 8003bde:	061f      	lsls	r7, r3, #24
 8003be0:	f851 5b04 	ldr.w	r5, [r1], #4
 8003be4:	d402      	bmi.n	8003bec <_printf_i+0x188>
 8003be6:	065f      	lsls	r7, r3, #25
 8003be8:	bf48      	it	mi
 8003bea:	b2ad      	uxthmi	r5, r5
 8003bec:	6031      	str	r1, [r6, #0]
 8003bee:	07d9      	lsls	r1, r3, #31
 8003bf0:	bf44      	itt	mi
 8003bf2:	f043 0320 	orrmi.w	r3, r3, #32
 8003bf6:	6023      	strmi	r3, [r4, #0]
 8003bf8:	b11d      	cbz	r5, 8003c02 <_printf_i+0x19e>
 8003bfa:	2310      	movs	r3, #16
 8003bfc:	e7ac      	b.n	8003b58 <_printf_i+0xf4>
 8003bfe:	4827      	ldr	r0, [pc, #156]	@ (8003c9c <_printf_i+0x238>)
 8003c00:	e7e9      	b.n	8003bd6 <_printf_i+0x172>
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	f023 0320 	bic.w	r3, r3, #32
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	e7f6      	b.n	8003bfa <_printf_i+0x196>
 8003c0c:	4616      	mov	r6, r2
 8003c0e:	e7bd      	b.n	8003b8c <_printf_i+0x128>
 8003c10:	6833      	ldr	r3, [r6, #0]
 8003c12:	6825      	ldr	r5, [r4, #0]
 8003c14:	6961      	ldr	r1, [r4, #20]
 8003c16:	1d18      	adds	r0, r3, #4
 8003c18:	6030      	str	r0, [r6, #0]
 8003c1a:	062e      	lsls	r6, r5, #24
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	d501      	bpl.n	8003c24 <_printf_i+0x1c0>
 8003c20:	6019      	str	r1, [r3, #0]
 8003c22:	e002      	b.n	8003c2a <_printf_i+0x1c6>
 8003c24:	0668      	lsls	r0, r5, #25
 8003c26:	d5fb      	bpl.n	8003c20 <_printf_i+0x1bc>
 8003c28:	8019      	strh	r1, [r3, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	6123      	str	r3, [r4, #16]
 8003c2e:	4616      	mov	r6, r2
 8003c30:	e7bc      	b.n	8003bac <_printf_i+0x148>
 8003c32:	6833      	ldr	r3, [r6, #0]
 8003c34:	1d1a      	adds	r2, r3, #4
 8003c36:	6032      	str	r2, [r6, #0]
 8003c38:	681e      	ldr	r6, [r3, #0]
 8003c3a:	6862      	ldr	r2, [r4, #4]
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4630      	mov	r0, r6
 8003c40:	f7fc fac6 	bl	80001d0 <memchr>
 8003c44:	b108      	cbz	r0, 8003c4a <_printf_i+0x1e6>
 8003c46:	1b80      	subs	r0, r0, r6
 8003c48:	6060      	str	r0, [r4, #4]
 8003c4a:	6863      	ldr	r3, [r4, #4]
 8003c4c:	6123      	str	r3, [r4, #16]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c54:	e7aa      	b.n	8003bac <_printf_i+0x148>
 8003c56:	6923      	ldr	r3, [r4, #16]
 8003c58:	4632      	mov	r2, r6
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	47d0      	blx	sl
 8003c60:	3001      	adds	r0, #1
 8003c62:	d0ad      	beq.n	8003bc0 <_printf_i+0x15c>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	079b      	lsls	r3, r3, #30
 8003c68:	d413      	bmi.n	8003c92 <_printf_i+0x22e>
 8003c6a:	68e0      	ldr	r0, [r4, #12]
 8003c6c:	9b03      	ldr	r3, [sp, #12]
 8003c6e:	4298      	cmp	r0, r3
 8003c70:	bfb8      	it	lt
 8003c72:	4618      	movlt	r0, r3
 8003c74:	e7a6      	b.n	8003bc4 <_printf_i+0x160>
 8003c76:	2301      	movs	r3, #1
 8003c78:	4632      	mov	r2, r6
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	47d0      	blx	sl
 8003c80:	3001      	adds	r0, #1
 8003c82:	d09d      	beq.n	8003bc0 <_printf_i+0x15c>
 8003c84:	3501      	adds	r5, #1
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	9903      	ldr	r1, [sp, #12]
 8003c8a:	1a5b      	subs	r3, r3, r1
 8003c8c:	42ab      	cmp	r3, r5
 8003c8e:	dcf2      	bgt.n	8003c76 <_printf_i+0x212>
 8003c90:	e7eb      	b.n	8003c6a <_printf_i+0x206>
 8003c92:	2500      	movs	r5, #0
 8003c94:	f104 0619 	add.w	r6, r4, #25
 8003c98:	e7f5      	b.n	8003c86 <_printf_i+0x222>
 8003c9a:	bf00      	nop
 8003c9c:	08004cc8 	.word	0x08004cc8
 8003ca0:	08004cd9 	.word	0x08004cd9

08003ca4 <memmove>:
 8003ca4:	4288      	cmp	r0, r1
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	eb01 0402 	add.w	r4, r1, r2
 8003cac:	d902      	bls.n	8003cb4 <memmove+0x10>
 8003cae:	4284      	cmp	r4, r0
 8003cb0:	4623      	mov	r3, r4
 8003cb2:	d807      	bhi.n	8003cc4 <memmove+0x20>
 8003cb4:	1e43      	subs	r3, r0, #1
 8003cb6:	42a1      	cmp	r1, r4
 8003cb8:	d008      	beq.n	8003ccc <memmove+0x28>
 8003cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003cbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003cc2:	e7f8      	b.n	8003cb6 <memmove+0x12>
 8003cc4:	4402      	add	r2, r0
 8003cc6:	4601      	mov	r1, r0
 8003cc8:	428a      	cmp	r2, r1
 8003cca:	d100      	bne.n	8003cce <memmove+0x2a>
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003cd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003cd6:	e7f7      	b.n	8003cc8 <memmove+0x24>

08003cd8 <_sbrk_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4d06      	ldr	r5, [pc, #24]	@ (8003cf4 <_sbrk_r+0x1c>)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	4604      	mov	r4, r0
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	602b      	str	r3, [r5, #0]
 8003ce4:	f7fd ff52 	bl	8001b8c <_sbrk>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d102      	bne.n	8003cf2 <_sbrk_r+0x1a>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	b103      	cbz	r3, 8003cf2 <_sbrk_r+0x1a>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
 8003cf4:	2000026c 	.word	0x2000026c

08003cf8 <_realloc_r>:
 8003cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cfc:	4680      	mov	r8, r0
 8003cfe:	4615      	mov	r5, r2
 8003d00:	460c      	mov	r4, r1
 8003d02:	b921      	cbnz	r1, 8003d0e <_realloc_r+0x16>
 8003d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d08:	4611      	mov	r1, r2
 8003d0a:	f7ff bc59 	b.w	80035c0 <_malloc_r>
 8003d0e:	b92a      	cbnz	r2, 8003d1c <_realloc_r+0x24>
 8003d10:	f7ff fbea 	bl	80034e8 <_free_r>
 8003d14:	2400      	movs	r4, #0
 8003d16:	4620      	mov	r0, r4
 8003d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d1c:	f000 f81a 	bl	8003d54 <_malloc_usable_size_r>
 8003d20:	4285      	cmp	r5, r0
 8003d22:	4606      	mov	r6, r0
 8003d24:	d802      	bhi.n	8003d2c <_realloc_r+0x34>
 8003d26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003d2a:	d8f4      	bhi.n	8003d16 <_realloc_r+0x1e>
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	4640      	mov	r0, r8
 8003d30:	f7ff fc46 	bl	80035c0 <_malloc_r>
 8003d34:	4607      	mov	r7, r0
 8003d36:	2800      	cmp	r0, #0
 8003d38:	d0ec      	beq.n	8003d14 <_realloc_r+0x1c>
 8003d3a:	42b5      	cmp	r5, r6
 8003d3c:	462a      	mov	r2, r5
 8003d3e:	4621      	mov	r1, r4
 8003d40:	bf28      	it	cs
 8003d42:	4632      	movcs	r2, r6
 8003d44:	f7ff fbc2 	bl	80034cc <memcpy>
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4640      	mov	r0, r8
 8003d4c:	f7ff fbcc 	bl	80034e8 <_free_r>
 8003d50:	463c      	mov	r4, r7
 8003d52:	e7e0      	b.n	8003d16 <_realloc_r+0x1e>

08003d54 <_malloc_usable_size_r>:
 8003d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d58:	1f18      	subs	r0, r3, #4
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	bfbc      	itt	lt
 8003d5e:	580b      	ldrlt	r3, [r1, r0]
 8003d60:	18c0      	addlt	r0, r0, r3
 8003d62:	4770      	bx	lr

08003d64 <pow>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	ed2d 8b02 	vpush	{d8}
 8003d6a:	eeb0 8a40 	vmov.f32	s16, s0
 8003d6e:	eef0 8a60 	vmov.f32	s17, s1
 8003d72:	ec55 4b11 	vmov	r4, r5, d1
 8003d76:	f000 f873 	bl	8003e60 <__ieee754_pow>
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	4620      	mov	r0, r4
 8003d80:	4629      	mov	r1, r5
 8003d82:	ec57 6b10 	vmov	r6, r7, d0
 8003d86:	f7fc fec9 	bl	8000b1c <__aeabi_dcmpun>
 8003d8a:	2800      	cmp	r0, #0
 8003d8c:	d13b      	bne.n	8003e06 <pow+0xa2>
 8003d8e:	ec51 0b18 	vmov	r0, r1, d8
 8003d92:	2200      	movs	r2, #0
 8003d94:	2300      	movs	r3, #0
 8003d96:	f7fc fe8f 	bl	8000ab8 <__aeabi_dcmpeq>
 8003d9a:	b1b8      	cbz	r0, 8003dcc <pow+0x68>
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2300      	movs	r3, #0
 8003da0:	4620      	mov	r0, r4
 8003da2:	4629      	mov	r1, r5
 8003da4:	f7fc fe88 	bl	8000ab8 <__aeabi_dcmpeq>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d146      	bne.n	8003e3a <pow+0xd6>
 8003dac:	ec45 4b10 	vmov	d0, r4, r5
 8003db0:	f000 f848 	bl	8003e44 <finite>
 8003db4:	b338      	cbz	r0, 8003e06 <pow+0xa2>
 8003db6:	2200      	movs	r2, #0
 8003db8:	2300      	movs	r3, #0
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f7fc fe85 	bl	8000acc <__aeabi_dcmplt>
 8003dc2:	b300      	cbz	r0, 8003e06 <pow+0xa2>
 8003dc4:	f7ff fb56 	bl	8003474 <__errno>
 8003dc8:	2322      	movs	r3, #34	@ 0x22
 8003dca:	e01b      	b.n	8003e04 <pow+0xa0>
 8003dcc:	ec47 6b10 	vmov	d0, r6, r7
 8003dd0:	f000 f838 	bl	8003e44 <finite>
 8003dd4:	b9e0      	cbnz	r0, 8003e10 <pow+0xac>
 8003dd6:	eeb0 0a48 	vmov.f32	s0, s16
 8003dda:	eef0 0a68 	vmov.f32	s1, s17
 8003dde:	f000 f831 	bl	8003e44 <finite>
 8003de2:	b1a8      	cbz	r0, 8003e10 <pow+0xac>
 8003de4:	ec45 4b10 	vmov	d0, r4, r5
 8003de8:	f000 f82c 	bl	8003e44 <finite>
 8003dec:	b180      	cbz	r0, 8003e10 <pow+0xac>
 8003dee:	4632      	mov	r2, r6
 8003df0:	463b      	mov	r3, r7
 8003df2:	4630      	mov	r0, r6
 8003df4:	4639      	mov	r1, r7
 8003df6:	f7fc fe91 	bl	8000b1c <__aeabi_dcmpun>
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d0e2      	beq.n	8003dc4 <pow+0x60>
 8003dfe:	f7ff fb39 	bl	8003474 <__errno>
 8003e02:	2321      	movs	r3, #33	@ 0x21
 8003e04:	6003      	str	r3, [r0, #0]
 8003e06:	ecbd 8b02 	vpop	{d8}
 8003e0a:	ec47 6b10 	vmov	d0, r6, r7
 8003e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e10:	2200      	movs	r2, #0
 8003e12:	2300      	movs	r3, #0
 8003e14:	4630      	mov	r0, r6
 8003e16:	4639      	mov	r1, r7
 8003e18:	f7fc fe4e 	bl	8000ab8 <__aeabi_dcmpeq>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	d0f2      	beq.n	8003e06 <pow+0xa2>
 8003e20:	eeb0 0a48 	vmov.f32	s0, s16
 8003e24:	eef0 0a68 	vmov.f32	s1, s17
 8003e28:	f000 f80c 	bl	8003e44 <finite>
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d0ea      	beq.n	8003e06 <pow+0xa2>
 8003e30:	ec45 4b10 	vmov	d0, r4, r5
 8003e34:	f000 f806 	bl	8003e44 <finite>
 8003e38:	e7c3      	b.n	8003dc2 <pow+0x5e>
 8003e3a:	4f01      	ldr	r7, [pc, #4]	@ (8003e40 <pow+0xdc>)
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	e7e2      	b.n	8003e06 <pow+0xa2>
 8003e40:	3ff00000 	.word	0x3ff00000

08003e44 <finite>:
 8003e44:	b082      	sub	sp, #8
 8003e46:	ed8d 0b00 	vstr	d0, [sp]
 8003e4a:	9801      	ldr	r0, [sp, #4]
 8003e4c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003e50:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003e54:	0fc0      	lsrs	r0, r0, #31
 8003e56:	b002      	add	sp, #8
 8003e58:	4770      	bx	lr
 8003e5a:	0000      	movs	r0, r0
 8003e5c:	0000      	movs	r0, r0
	...

08003e60 <__ieee754_pow>:
 8003e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e64:	b091      	sub	sp, #68	@ 0x44
 8003e66:	ed8d 1b00 	vstr	d1, [sp]
 8003e6a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8003e6e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8003e72:	ea5a 0001 	orrs.w	r0, sl, r1
 8003e76:	ec57 6b10 	vmov	r6, r7, d0
 8003e7a:	d113      	bne.n	8003ea4 <__ieee754_pow+0x44>
 8003e7c:	19b3      	adds	r3, r6, r6
 8003e7e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8003e82:	4152      	adcs	r2, r2
 8003e84:	4298      	cmp	r0, r3
 8003e86:	4b98      	ldr	r3, [pc, #608]	@ (80040e8 <__ieee754_pow+0x288>)
 8003e88:	4193      	sbcs	r3, r2
 8003e8a:	f080 84ea 	bcs.w	8004862 <__ieee754_pow+0xa02>
 8003e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e92:	4630      	mov	r0, r6
 8003e94:	4639      	mov	r1, r7
 8003e96:	f7fc f9f1 	bl	800027c <__adddf3>
 8003e9a:	ec41 0b10 	vmov	d0, r0, r1
 8003e9e:	b011      	add	sp, #68	@ 0x44
 8003ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea4:	4a91      	ldr	r2, [pc, #580]	@ (80040ec <__ieee754_pow+0x28c>)
 8003ea6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003eaa:	4590      	cmp	r8, r2
 8003eac:	463d      	mov	r5, r7
 8003eae:	4633      	mov	r3, r6
 8003eb0:	d806      	bhi.n	8003ec0 <__ieee754_pow+0x60>
 8003eb2:	d101      	bne.n	8003eb8 <__ieee754_pow+0x58>
 8003eb4:	2e00      	cmp	r6, #0
 8003eb6:	d1ea      	bne.n	8003e8e <__ieee754_pow+0x2e>
 8003eb8:	4592      	cmp	sl, r2
 8003eba:	d801      	bhi.n	8003ec0 <__ieee754_pow+0x60>
 8003ebc:	d10e      	bne.n	8003edc <__ieee754_pow+0x7c>
 8003ebe:	b169      	cbz	r1, 8003edc <__ieee754_pow+0x7c>
 8003ec0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8003ec4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8003ec8:	431d      	orrs	r5, r3
 8003eca:	d1e0      	bne.n	8003e8e <__ieee754_pow+0x2e>
 8003ecc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003ed0:	18db      	adds	r3, r3, r3
 8003ed2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8003ed6:	4152      	adcs	r2, r2
 8003ed8:	429d      	cmp	r5, r3
 8003eda:	e7d4      	b.n	8003e86 <__ieee754_pow+0x26>
 8003edc:	2d00      	cmp	r5, #0
 8003ede:	46c3      	mov	fp, r8
 8003ee0:	da3a      	bge.n	8003f58 <__ieee754_pow+0xf8>
 8003ee2:	4a83      	ldr	r2, [pc, #524]	@ (80040f0 <__ieee754_pow+0x290>)
 8003ee4:	4592      	cmp	sl, r2
 8003ee6:	d84d      	bhi.n	8003f84 <__ieee754_pow+0x124>
 8003ee8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8003eec:	4592      	cmp	sl, r2
 8003eee:	f240 84c7 	bls.w	8004880 <__ieee754_pow+0xa20>
 8003ef2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8003ef6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8003efa:	2a14      	cmp	r2, #20
 8003efc:	dd0f      	ble.n	8003f1e <__ieee754_pow+0xbe>
 8003efe:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8003f02:	fa21 f402 	lsr.w	r4, r1, r2
 8003f06:	fa04 f202 	lsl.w	r2, r4, r2
 8003f0a:	428a      	cmp	r2, r1
 8003f0c:	f040 84b8 	bne.w	8004880 <__ieee754_pow+0xa20>
 8003f10:	f004 0401 	and.w	r4, r4, #1
 8003f14:	f1c4 0402 	rsb	r4, r4, #2
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	d158      	bne.n	8003fce <__ieee754_pow+0x16e>
 8003f1c:	e00e      	b.n	8003f3c <__ieee754_pow+0xdc>
 8003f1e:	2900      	cmp	r1, #0
 8003f20:	d154      	bne.n	8003fcc <__ieee754_pow+0x16c>
 8003f22:	f1c2 0214 	rsb	r2, r2, #20
 8003f26:	fa4a f402 	asr.w	r4, sl, r2
 8003f2a:	fa04 f202 	lsl.w	r2, r4, r2
 8003f2e:	4552      	cmp	r2, sl
 8003f30:	f040 84a3 	bne.w	800487a <__ieee754_pow+0xa1a>
 8003f34:	f004 0401 	and.w	r4, r4, #1
 8003f38:	f1c4 0402 	rsb	r4, r4, #2
 8003f3c:	4a6d      	ldr	r2, [pc, #436]	@ (80040f4 <__ieee754_pow+0x294>)
 8003f3e:	4592      	cmp	sl, r2
 8003f40:	d12e      	bne.n	8003fa0 <__ieee754_pow+0x140>
 8003f42:	f1b9 0f00 	cmp.w	r9, #0
 8003f46:	f280 8494 	bge.w	8004872 <__ieee754_pow+0xa12>
 8003f4a:	496a      	ldr	r1, [pc, #424]	@ (80040f4 <__ieee754_pow+0x294>)
 8003f4c:	4632      	mov	r2, r6
 8003f4e:	463b      	mov	r3, r7
 8003f50:	2000      	movs	r0, #0
 8003f52:	f7fc fc73 	bl	800083c <__aeabi_ddiv>
 8003f56:	e7a0      	b.n	8003e9a <__ieee754_pow+0x3a>
 8003f58:	2400      	movs	r4, #0
 8003f5a:	bbc1      	cbnz	r1, 8003fce <__ieee754_pow+0x16e>
 8003f5c:	4a63      	ldr	r2, [pc, #396]	@ (80040ec <__ieee754_pow+0x28c>)
 8003f5e:	4592      	cmp	sl, r2
 8003f60:	d1ec      	bne.n	8003f3c <__ieee754_pow+0xdc>
 8003f62:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8003f66:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	f000 8479 	beq.w	8004862 <__ieee754_pow+0xa02>
 8003f70:	4b61      	ldr	r3, [pc, #388]	@ (80040f8 <__ieee754_pow+0x298>)
 8003f72:	4598      	cmp	r8, r3
 8003f74:	d908      	bls.n	8003f88 <__ieee754_pow+0x128>
 8003f76:	f1b9 0f00 	cmp.w	r9, #0
 8003f7a:	f2c0 8476 	blt.w	800486a <__ieee754_pow+0xa0a>
 8003f7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f82:	e78a      	b.n	8003e9a <__ieee754_pow+0x3a>
 8003f84:	2402      	movs	r4, #2
 8003f86:	e7e8      	b.n	8003f5a <__ieee754_pow+0xfa>
 8003f88:	f1b9 0f00 	cmp.w	r9, #0
 8003f8c:	f04f 0000 	mov.w	r0, #0
 8003f90:	f04f 0100 	mov.w	r1, #0
 8003f94:	da81      	bge.n	8003e9a <__ieee754_pow+0x3a>
 8003f96:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003f9a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003f9e:	e77c      	b.n	8003e9a <__ieee754_pow+0x3a>
 8003fa0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8003fa4:	d106      	bne.n	8003fb4 <__ieee754_pow+0x154>
 8003fa6:	4632      	mov	r2, r6
 8003fa8:	463b      	mov	r3, r7
 8003faa:	4630      	mov	r0, r6
 8003fac:	4639      	mov	r1, r7
 8003fae:	f7fc fb1b 	bl	80005e8 <__aeabi_dmul>
 8003fb2:	e772      	b.n	8003e9a <__ieee754_pow+0x3a>
 8003fb4:	4a51      	ldr	r2, [pc, #324]	@ (80040fc <__ieee754_pow+0x29c>)
 8003fb6:	4591      	cmp	r9, r2
 8003fb8:	d109      	bne.n	8003fce <__ieee754_pow+0x16e>
 8003fba:	2d00      	cmp	r5, #0
 8003fbc:	db07      	blt.n	8003fce <__ieee754_pow+0x16e>
 8003fbe:	ec47 6b10 	vmov	d0, r6, r7
 8003fc2:	b011      	add	sp, #68	@ 0x44
 8003fc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc8:	f000 bd52 	b.w	8004a70 <__ieee754_sqrt>
 8003fcc:	2400      	movs	r4, #0
 8003fce:	ec47 6b10 	vmov	d0, r6, r7
 8003fd2:	9302      	str	r3, [sp, #8]
 8003fd4:	f000 fc88 	bl	80048e8 <fabs>
 8003fd8:	9b02      	ldr	r3, [sp, #8]
 8003fda:	ec51 0b10 	vmov	r0, r1, d0
 8003fde:	bb53      	cbnz	r3, 8004036 <__ieee754_pow+0x1d6>
 8003fe0:	4b44      	ldr	r3, [pc, #272]	@ (80040f4 <__ieee754_pow+0x294>)
 8003fe2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d002      	beq.n	8003ff0 <__ieee754_pow+0x190>
 8003fea:	f1b8 0f00 	cmp.w	r8, #0
 8003fee:	d122      	bne.n	8004036 <__ieee754_pow+0x1d6>
 8003ff0:	f1b9 0f00 	cmp.w	r9, #0
 8003ff4:	da05      	bge.n	8004002 <__ieee754_pow+0x1a2>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	493d      	ldr	r1, [pc, #244]	@ (80040f4 <__ieee754_pow+0x294>)
 8003ffe:	f7fc fc1d 	bl	800083c <__aeabi_ddiv>
 8004002:	2d00      	cmp	r5, #0
 8004004:	f6bf af49 	bge.w	8003e9a <__ieee754_pow+0x3a>
 8004008:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800400c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8004010:	ea58 0804 	orrs.w	r8, r8, r4
 8004014:	d108      	bne.n	8004028 <__ieee754_pow+0x1c8>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4610      	mov	r0, r2
 800401c:	4619      	mov	r1, r3
 800401e:	f7fc f92b 	bl	8000278 <__aeabi_dsub>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	e794      	b.n	8003f52 <__ieee754_pow+0xf2>
 8004028:	2c01      	cmp	r4, #1
 800402a:	f47f af36 	bne.w	8003e9a <__ieee754_pow+0x3a>
 800402e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004032:	4619      	mov	r1, r3
 8004034:	e731      	b.n	8003e9a <__ieee754_pow+0x3a>
 8004036:	0feb      	lsrs	r3, r5, #31
 8004038:	3b01      	subs	r3, #1
 800403a:	ea53 0204 	orrs.w	r2, r3, r4
 800403e:	d102      	bne.n	8004046 <__ieee754_pow+0x1e6>
 8004040:	4632      	mov	r2, r6
 8004042:	463b      	mov	r3, r7
 8004044:	e7e9      	b.n	800401a <__ieee754_pow+0x1ba>
 8004046:	3c01      	subs	r4, #1
 8004048:	431c      	orrs	r4, r3
 800404a:	d016      	beq.n	800407a <__ieee754_pow+0x21a>
 800404c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80040d8 <__ieee754_pow+0x278>
 8004050:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8004054:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004058:	f240 8112 	bls.w	8004280 <__ieee754_pow+0x420>
 800405c:	4b28      	ldr	r3, [pc, #160]	@ (8004100 <__ieee754_pow+0x2a0>)
 800405e:	459a      	cmp	sl, r3
 8004060:	4b25      	ldr	r3, [pc, #148]	@ (80040f8 <__ieee754_pow+0x298>)
 8004062:	d916      	bls.n	8004092 <__ieee754_pow+0x232>
 8004064:	4598      	cmp	r8, r3
 8004066:	d80b      	bhi.n	8004080 <__ieee754_pow+0x220>
 8004068:	f1b9 0f00 	cmp.w	r9, #0
 800406c:	da0b      	bge.n	8004086 <__ieee754_pow+0x226>
 800406e:	2000      	movs	r0, #0
 8004070:	b011      	add	sp, #68	@ 0x44
 8004072:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004076:	f000 bcf3 	b.w	8004a60 <__math_oflow>
 800407a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80040e0 <__ieee754_pow+0x280>
 800407e:	e7e7      	b.n	8004050 <__ieee754_pow+0x1f0>
 8004080:	f1b9 0f00 	cmp.w	r9, #0
 8004084:	dcf3      	bgt.n	800406e <__ieee754_pow+0x20e>
 8004086:	2000      	movs	r0, #0
 8004088:	b011      	add	sp, #68	@ 0x44
 800408a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800408e:	f000 bcdf 	b.w	8004a50 <__math_uflow>
 8004092:	4598      	cmp	r8, r3
 8004094:	d20c      	bcs.n	80040b0 <__ieee754_pow+0x250>
 8004096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800409a:	2200      	movs	r2, #0
 800409c:	2300      	movs	r3, #0
 800409e:	f7fc fd15 	bl	8000acc <__aeabi_dcmplt>
 80040a2:	3800      	subs	r0, #0
 80040a4:	bf18      	it	ne
 80040a6:	2001      	movne	r0, #1
 80040a8:	f1b9 0f00 	cmp.w	r9, #0
 80040ac:	daec      	bge.n	8004088 <__ieee754_pow+0x228>
 80040ae:	e7df      	b.n	8004070 <__ieee754_pow+0x210>
 80040b0:	4b10      	ldr	r3, [pc, #64]	@ (80040f4 <__ieee754_pow+0x294>)
 80040b2:	4598      	cmp	r8, r3
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	d924      	bls.n	8004104 <__ieee754_pow+0x2a4>
 80040ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040be:	2300      	movs	r3, #0
 80040c0:	f7fc fd04 	bl	8000acc <__aeabi_dcmplt>
 80040c4:	3800      	subs	r0, #0
 80040c6:	bf18      	it	ne
 80040c8:	2001      	movne	r0, #1
 80040ca:	f1b9 0f00 	cmp.w	r9, #0
 80040ce:	dccf      	bgt.n	8004070 <__ieee754_pow+0x210>
 80040d0:	e7da      	b.n	8004088 <__ieee754_pow+0x228>
 80040d2:	bf00      	nop
 80040d4:	f3af 8000 	nop.w
 80040d8:	00000000 	.word	0x00000000
 80040dc:	3ff00000 	.word	0x3ff00000
 80040e0:	00000000 	.word	0x00000000
 80040e4:	bff00000 	.word	0xbff00000
 80040e8:	fff00000 	.word	0xfff00000
 80040ec:	7ff00000 	.word	0x7ff00000
 80040f0:	433fffff 	.word	0x433fffff
 80040f4:	3ff00000 	.word	0x3ff00000
 80040f8:	3fefffff 	.word	0x3fefffff
 80040fc:	3fe00000 	.word	0x3fe00000
 8004100:	43f00000 	.word	0x43f00000
 8004104:	4b5a      	ldr	r3, [pc, #360]	@ (8004270 <__ieee754_pow+0x410>)
 8004106:	f7fc f8b7 	bl	8000278 <__aeabi_dsub>
 800410a:	a351      	add	r3, pc, #324	@ (adr r3, 8004250 <__ieee754_pow+0x3f0>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	4604      	mov	r4, r0
 8004112:	460d      	mov	r5, r1
 8004114:	f7fc fa68 	bl	80005e8 <__aeabi_dmul>
 8004118:	a34f      	add	r3, pc, #316	@ (adr r3, 8004258 <__ieee754_pow+0x3f8>)
 800411a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411e:	4606      	mov	r6, r0
 8004120:	460f      	mov	r7, r1
 8004122:	4620      	mov	r0, r4
 8004124:	4629      	mov	r1, r5
 8004126:	f7fc fa5f 	bl	80005e8 <__aeabi_dmul>
 800412a:	4b52      	ldr	r3, [pc, #328]	@ (8004274 <__ieee754_pow+0x414>)
 800412c:	4682      	mov	sl, r0
 800412e:	468b      	mov	fp, r1
 8004130:	2200      	movs	r2, #0
 8004132:	4620      	mov	r0, r4
 8004134:	4629      	mov	r1, r5
 8004136:	f7fc fa57 	bl	80005e8 <__aeabi_dmul>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	a148      	add	r1, pc, #288	@ (adr r1, 8004260 <__ieee754_pow+0x400>)
 8004140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004144:	f7fc f898 	bl	8000278 <__aeabi_dsub>
 8004148:	4622      	mov	r2, r4
 800414a:	462b      	mov	r3, r5
 800414c:	f7fc fa4c 	bl	80005e8 <__aeabi_dmul>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	2000      	movs	r0, #0
 8004156:	4948      	ldr	r1, [pc, #288]	@ (8004278 <__ieee754_pow+0x418>)
 8004158:	f7fc f88e 	bl	8000278 <__aeabi_dsub>
 800415c:	4622      	mov	r2, r4
 800415e:	4680      	mov	r8, r0
 8004160:	4689      	mov	r9, r1
 8004162:	462b      	mov	r3, r5
 8004164:	4620      	mov	r0, r4
 8004166:	4629      	mov	r1, r5
 8004168:	f7fc fa3e 	bl	80005e8 <__aeabi_dmul>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4640      	mov	r0, r8
 8004172:	4649      	mov	r1, r9
 8004174:	f7fc fa38 	bl	80005e8 <__aeabi_dmul>
 8004178:	a33b      	add	r3, pc, #236	@ (adr r3, 8004268 <__ieee754_pow+0x408>)
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f7fc fa33 	bl	80005e8 <__aeabi_dmul>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4650      	mov	r0, sl
 8004188:	4659      	mov	r1, fp
 800418a:	f7fc f875 	bl	8000278 <__aeabi_dsub>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4680      	mov	r8, r0
 8004194:	4689      	mov	r9, r1
 8004196:	4630      	mov	r0, r6
 8004198:	4639      	mov	r1, r7
 800419a:	f7fc f86f 	bl	800027c <__adddf3>
 800419e:	2400      	movs	r4, #0
 80041a0:	4632      	mov	r2, r6
 80041a2:	463b      	mov	r3, r7
 80041a4:	4620      	mov	r0, r4
 80041a6:	460d      	mov	r5, r1
 80041a8:	f7fc f866 	bl	8000278 <__aeabi_dsub>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4640      	mov	r0, r8
 80041b2:	4649      	mov	r1, r9
 80041b4:	f7fc f860 	bl	8000278 <__aeabi_dsub>
 80041b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80041c0:	2300      	movs	r3, #0
 80041c2:	9304      	str	r3, [sp, #16]
 80041c4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80041c8:	4606      	mov	r6, r0
 80041ca:	460f      	mov	r7, r1
 80041cc:	4652      	mov	r2, sl
 80041ce:	465b      	mov	r3, fp
 80041d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041d4:	f7fc f850 	bl	8000278 <__aeabi_dsub>
 80041d8:	4622      	mov	r2, r4
 80041da:	462b      	mov	r3, r5
 80041dc:	f7fc fa04 	bl	80005e8 <__aeabi_dmul>
 80041e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041e4:	4680      	mov	r8, r0
 80041e6:	4689      	mov	r9, r1
 80041e8:	4630      	mov	r0, r6
 80041ea:	4639      	mov	r1, r7
 80041ec:	f7fc f9fc 	bl	80005e8 <__aeabi_dmul>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4640      	mov	r0, r8
 80041f6:	4649      	mov	r1, r9
 80041f8:	f7fc f840 	bl	800027c <__adddf3>
 80041fc:	4652      	mov	r2, sl
 80041fe:	465b      	mov	r3, fp
 8004200:	4606      	mov	r6, r0
 8004202:	460f      	mov	r7, r1
 8004204:	4620      	mov	r0, r4
 8004206:	4629      	mov	r1, r5
 8004208:	f7fc f9ee 	bl	80005e8 <__aeabi_dmul>
 800420c:	460b      	mov	r3, r1
 800420e:	4602      	mov	r2, r0
 8004210:	4680      	mov	r8, r0
 8004212:	4689      	mov	r9, r1
 8004214:	4630      	mov	r0, r6
 8004216:	4639      	mov	r1, r7
 8004218:	f7fc f830 	bl	800027c <__adddf3>
 800421c:	4b17      	ldr	r3, [pc, #92]	@ (800427c <__ieee754_pow+0x41c>)
 800421e:	4299      	cmp	r1, r3
 8004220:	4604      	mov	r4, r0
 8004222:	460d      	mov	r5, r1
 8004224:	468a      	mov	sl, r1
 8004226:	468b      	mov	fp, r1
 8004228:	f340 82ef 	ble.w	800480a <__ieee754_pow+0x9aa>
 800422c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004230:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8004234:	4303      	orrs	r3, r0
 8004236:	f000 81e8 	beq.w	800460a <__ieee754_pow+0x7aa>
 800423a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800423e:	2200      	movs	r2, #0
 8004240:	2300      	movs	r3, #0
 8004242:	f7fc fc43 	bl	8000acc <__aeabi_dcmplt>
 8004246:	3800      	subs	r0, #0
 8004248:	bf18      	it	ne
 800424a:	2001      	movne	r0, #1
 800424c:	e710      	b.n	8004070 <__ieee754_pow+0x210>
 800424e:	bf00      	nop
 8004250:	60000000 	.word	0x60000000
 8004254:	3ff71547 	.word	0x3ff71547
 8004258:	f85ddf44 	.word	0xf85ddf44
 800425c:	3e54ae0b 	.word	0x3e54ae0b
 8004260:	55555555 	.word	0x55555555
 8004264:	3fd55555 	.word	0x3fd55555
 8004268:	652b82fe 	.word	0x652b82fe
 800426c:	3ff71547 	.word	0x3ff71547
 8004270:	3ff00000 	.word	0x3ff00000
 8004274:	3fd00000 	.word	0x3fd00000
 8004278:	3fe00000 	.word	0x3fe00000
 800427c:	408fffff 	.word	0x408fffff
 8004280:	4bd5      	ldr	r3, [pc, #852]	@ (80045d8 <__ieee754_pow+0x778>)
 8004282:	402b      	ands	r3, r5
 8004284:	2200      	movs	r2, #0
 8004286:	b92b      	cbnz	r3, 8004294 <__ieee754_pow+0x434>
 8004288:	4bd4      	ldr	r3, [pc, #848]	@ (80045dc <__ieee754_pow+0x77c>)
 800428a:	f7fc f9ad 	bl	80005e8 <__aeabi_dmul>
 800428e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8004292:	468b      	mov	fp, r1
 8004294:	ea4f 532b 	mov.w	r3, fp, asr #20
 8004298:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800429c:	4413      	add	r3, r2
 800429e:	930a      	str	r3, [sp, #40]	@ 0x28
 80042a0:	4bcf      	ldr	r3, [pc, #828]	@ (80045e0 <__ieee754_pow+0x780>)
 80042a2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80042a6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80042aa:	459b      	cmp	fp, r3
 80042ac:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80042b0:	dd08      	ble.n	80042c4 <__ieee754_pow+0x464>
 80042b2:	4bcc      	ldr	r3, [pc, #816]	@ (80045e4 <__ieee754_pow+0x784>)
 80042b4:	459b      	cmp	fp, r3
 80042b6:	f340 81a5 	ble.w	8004604 <__ieee754_pow+0x7a4>
 80042ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042bc:	3301      	adds	r3, #1
 80042be:	930a      	str	r3, [sp, #40]	@ 0x28
 80042c0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80042c4:	f04f 0a00 	mov.w	sl, #0
 80042c8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80042cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042ce:	4bc6      	ldr	r3, [pc, #792]	@ (80045e8 <__ieee754_pow+0x788>)
 80042d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80042d4:	ed93 7b00 	vldr	d7, [r3]
 80042d8:	4629      	mov	r1, r5
 80042da:	ec53 2b17 	vmov	r2, r3, d7
 80042de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80042e2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80042e6:	f7fb ffc7 	bl	8000278 <__aeabi_dsub>
 80042ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80042ee:	4606      	mov	r6, r0
 80042f0:	460f      	mov	r7, r1
 80042f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042f6:	f7fb ffc1 	bl	800027c <__adddf3>
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	2000      	movs	r0, #0
 8004300:	49ba      	ldr	r1, [pc, #744]	@ (80045ec <__ieee754_pow+0x78c>)
 8004302:	f7fc fa9b 	bl	800083c <__aeabi_ddiv>
 8004306:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4630      	mov	r0, r6
 8004310:	4639      	mov	r1, r7
 8004312:	f7fc f969 	bl	80005e8 <__aeabi_dmul>
 8004316:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800431a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800431e:	106d      	asrs	r5, r5, #1
 8004320:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8004324:	f04f 0b00 	mov.w	fp, #0
 8004328:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800432c:	4661      	mov	r1, ip
 800432e:	2200      	movs	r2, #0
 8004330:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004334:	4658      	mov	r0, fp
 8004336:	46e1      	mov	r9, ip
 8004338:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800433c:	4614      	mov	r4, r2
 800433e:	461d      	mov	r5, r3
 8004340:	f7fc f952 	bl	80005e8 <__aeabi_dmul>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4630      	mov	r0, r6
 800434a:	4639      	mov	r1, r7
 800434c:	f7fb ff94 	bl	8000278 <__aeabi_dsub>
 8004350:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004354:	4606      	mov	r6, r0
 8004356:	460f      	mov	r7, r1
 8004358:	4620      	mov	r0, r4
 800435a:	4629      	mov	r1, r5
 800435c:	f7fb ff8c 	bl	8000278 <__aeabi_dsub>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004368:	f7fb ff86 	bl	8000278 <__aeabi_dsub>
 800436c:	465a      	mov	r2, fp
 800436e:	464b      	mov	r3, r9
 8004370:	f7fc f93a 	bl	80005e8 <__aeabi_dmul>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4630      	mov	r0, r6
 800437a:	4639      	mov	r1, r7
 800437c:	f7fb ff7c 	bl	8000278 <__aeabi_dsub>
 8004380:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004384:	f7fc f930 	bl	80005e8 <__aeabi_dmul>
 8004388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800438c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004390:	4610      	mov	r0, r2
 8004392:	4619      	mov	r1, r3
 8004394:	f7fc f928 	bl	80005e8 <__aeabi_dmul>
 8004398:	a37d      	add	r3, pc, #500	@ (adr r3, 8004590 <__ieee754_pow+0x730>)
 800439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439e:	4604      	mov	r4, r0
 80043a0:	460d      	mov	r5, r1
 80043a2:	f7fc f921 	bl	80005e8 <__aeabi_dmul>
 80043a6:	a37c      	add	r3, pc, #496	@ (adr r3, 8004598 <__ieee754_pow+0x738>)
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f7fb ff66 	bl	800027c <__adddf3>
 80043b0:	4622      	mov	r2, r4
 80043b2:	462b      	mov	r3, r5
 80043b4:	f7fc f918 	bl	80005e8 <__aeabi_dmul>
 80043b8:	a379      	add	r3, pc, #484	@ (adr r3, 80045a0 <__ieee754_pow+0x740>)
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f7fb ff5d 	bl	800027c <__adddf3>
 80043c2:	4622      	mov	r2, r4
 80043c4:	462b      	mov	r3, r5
 80043c6:	f7fc f90f 	bl	80005e8 <__aeabi_dmul>
 80043ca:	a377      	add	r3, pc, #476	@ (adr r3, 80045a8 <__ieee754_pow+0x748>)
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	f7fb ff54 	bl	800027c <__adddf3>
 80043d4:	4622      	mov	r2, r4
 80043d6:	462b      	mov	r3, r5
 80043d8:	f7fc f906 	bl	80005e8 <__aeabi_dmul>
 80043dc:	a374      	add	r3, pc, #464	@ (adr r3, 80045b0 <__ieee754_pow+0x750>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f7fb ff4b 	bl	800027c <__adddf3>
 80043e6:	4622      	mov	r2, r4
 80043e8:	462b      	mov	r3, r5
 80043ea:	f7fc f8fd 	bl	80005e8 <__aeabi_dmul>
 80043ee:	a372      	add	r3, pc, #456	@ (adr r3, 80045b8 <__ieee754_pow+0x758>)
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f7fb ff42 	bl	800027c <__adddf3>
 80043f8:	4622      	mov	r2, r4
 80043fa:	4606      	mov	r6, r0
 80043fc:	460f      	mov	r7, r1
 80043fe:	462b      	mov	r3, r5
 8004400:	4620      	mov	r0, r4
 8004402:	4629      	mov	r1, r5
 8004404:	f7fc f8f0 	bl	80005e8 <__aeabi_dmul>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4630      	mov	r0, r6
 800440e:	4639      	mov	r1, r7
 8004410:	f7fc f8ea 	bl	80005e8 <__aeabi_dmul>
 8004414:	465a      	mov	r2, fp
 8004416:	4604      	mov	r4, r0
 8004418:	460d      	mov	r5, r1
 800441a:	464b      	mov	r3, r9
 800441c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004420:	f7fb ff2c 	bl	800027c <__adddf3>
 8004424:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004428:	f7fc f8de 	bl	80005e8 <__aeabi_dmul>
 800442c:	4622      	mov	r2, r4
 800442e:	462b      	mov	r3, r5
 8004430:	f7fb ff24 	bl	800027c <__adddf3>
 8004434:	465a      	mov	r2, fp
 8004436:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800443a:	464b      	mov	r3, r9
 800443c:	4658      	mov	r0, fp
 800443e:	4649      	mov	r1, r9
 8004440:	f7fc f8d2 	bl	80005e8 <__aeabi_dmul>
 8004444:	4b6a      	ldr	r3, [pc, #424]	@ (80045f0 <__ieee754_pow+0x790>)
 8004446:	2200      	movs	r2, #0
 8004448:	4606      	mov	r6, r0
 800444a:	460f      	mov	r7, r1
 800444c:	f7fb ff16 	bl	800027c <__adddf3>
 8004450:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004454:	f7fb ff12 	bl	800027c <__adddf3>
 8004458:	46d8      	mov	r8, fp
 800445a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800445e:	460d      	mov	r5, r1
 8004460:	465a      	mov	r2, fp
 8004462:	460b      	mov	r3, r1
 8004464:	4640      	mov	r0, r8
 8004466:	4649      	mov	r1, r9
 8004468:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800446c:	f7fc f8bc 	bl	80005e8 <__aeabi_dmul>
 8004470:	465c      	mov	r4, fp
 8004472:	4680      	mov	r8, r0
 8004474:	4689      	mov	r9, r1
 8004476:	4b5e      	ldr	r3, [pc, #376]	@ (80045f0 <__ieee754_pow+0x790>)
 8004478:	2200      	movs	r2, #0
 800447a:	4620      	mov	r0, r4
 800447c:	4629      	mov	r1, r5
 800447e:	f7fb fefb 	bl	8000278 <__aeabi_dsub>
 8004482:	4632      	mov	r2, r6
 8004484:	463b      	mov	r3, r7
 8004486:	f7fb fef7 	bl	8000278 <__aeabi_dsub>
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004492:	f7fb fef1 	bl	8000278 <__aeabi_dsub>
 8004496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800449a:	f7fc f8a5 	bl	80005e8 <__aeabi_dmul>
 800449e:	4622      	mov	r2, r4
 80044a0:	4606      	mov	r6, r0
 80044a2:	460f      	mov	r7, r1
 80044a4:	462b      	mov	r3, r5
 80044a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044aa:	f7fc f89d 	bl	80005e8 <__aeabi_dmul>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4630      	mov	r0, r6
 80044b4:	4639      	mov	r1, r7
 80044b6:	f7fb fee1 	bl	800027c <__adddf3>
 80044ba:	4606      	mov	r6, r0
 80044bc:	460f      	mov	r7, r1
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4640      	mov	r0, r8
 80044c4:	4649      	mov	r1, r9
 80044c6:	f7fb fed9 	bl	800027c <__adddf3>
 80044ca:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80044ce:	a33c      	add	r3, pc, #240	@ (adr r3, 80045c0 <__ieee754_pow+0x760>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	4658      	mov	r0, fp
 80044d6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80044da:	460d      	mov	r5, r1
 80044dc:	f7fc f884 	bl	80005e8 <__aeabi_dmul>
 80044e0:	465c      	mov	r4, fp
 80044e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044e6:	4642      	mov	r2, r8
 80044e8:	464b      	mov	r3, r9
 80044ea:	4620      	mov	r0, r4
 80044ec:	4629      	mov	r1, r5
 80044ee:	f7fb fec3 	bl	8000278 <__aeabi_dsub>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4630      	mov	r0, r6
 80044f8:	4639      	mov	r1, r7
 80044fa:	f7fb febd 	bl	8000278 <__aeabi_dsub>
 80044fe:	a332      	add	r3, pc, #200	@ (adr r3, 80045c8 <__ieee754_pow+0x768>)
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f7fc f870 	bl	80005e8 <__aeabi_dmul>
 8004508:	a331      	add	r3, pc, #196	@ (adr r3, 80045d0 <__ieee754_pow+0x770>)
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	4606      	mov	r6, r0
 8004510:	460f      	mov	r7, r1
 8004512:	4620      	mov	r0, r4
 8004514:	4629      	mov	r1, r5
 8004516:	f7fc f867 	bl	80005e8 <__aeabi_dmul>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4630      	mov	r0, r6
 8004520:	4639      	mov	r1, r7
 8004522:	f7fb feab 	bl	800027c <__adddf3>
 8004526:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004528:	4b32      	ldr	r3, [pc, #200]	@ (80045f4 <__ieee754_pow+0x794>)
 800452a:	4413      	add	r3, r2
 800452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004530:	f7fb fea4 	bl	800027c <__adddf3>
 8004534:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004538:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800453a:	f7fb ffeb 	bl	8000514 <__aeabi_i2d>
 800453e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004540:	4b2d      	ldr	r3, [pc, #180]	@ (80045f8 <__ieee754_pow+0x798>)
 8004542:	4413      	add	r3, r2
 8004544:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004548:	4606      	mov	r6, r0
 800454a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800454e:	460f      	mov	r7, r1
 8004550:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004554:	f7fb fe92 	bl	800027c <__adddf3>
 8004558:	4642      	mov	r2, r8
 800455a:	464b      	mov	r3, r9
 800455c:	f7fb fe8e 	bl	800027c <__adddf3>
 8004560:	4632      	mov	r2, r6
 8004562:	463b      	mov	r3, r7
 8004564:	f7fb fe8a 	bl	800027c <__adddf3>
 8004568:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800456c:	4632      	mov	r2, r6
 800456e:	463b      	mov	r3, r7
 8004570:	4658      	mov	r0, fp
 8004572:	460d      	mov	r5, r1
 8004574:	f7fb fe80 	bl	8000278 <__aeabi_dsub>
 8004578:	4642      	mov	r2, r8
 800457a:	464b      	mov	r3, r9
 800457c:	f7fb fe7c 	bl	8000278 <__aeabi_dsub>
 8004580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004584:	f7fb fe78 	bl	8000278 <__aeabi_dsub>
 8004588:	465c      	mov	r4, fp
 800458a:	4602      	mov	r2, r0
 800458c:	e036      	b.n	80045fc <__ieee754_pow+0x79c>
 800458e:	bf00      	nop
 8004590:	4a454eef 	.word	0x4a454eef
 8004594:	3fca7e28 	.word	0x3fca7e28
 8004598:	93c9db65 	.word	0x93c9db65
 800459c:	3fcd864a 	.word	0x3fcd864a
 80045a0:	a91d4101 	.word	0xa91d4101
 80045a4:	3fd17460 	.word	0x3fd17460
 80045a8:	518f264d 	.word	0x518f264d
 80045ac:	3fd55555 	.word	0x3fd55555
 80045b0:	db6fabff 	.word	0xdb6fabff
 80045b4:	3fdb6db6 	.word	0x3fdb6db6
 80045b8:	33333303 	.word	0x33333303
 80045bc:	3fe33333 	.word	0x3fe33333
 80045c0:	e0000000 	.word	0xe0000000
 80045c4:	3feec709 	.word	0x3feec709
 80045c8:	dc3a03fd 	.word	0xdc3a03fd
 80045cc:	3feec709 	.word	0x3feec709
 80045d0:	145b01f5 	.word	0x145b01f5
 80045d4:	be3e2fe0 	.word	0xbe3e2fe0
 80045d8:	7ff00000 	.word	0x7ff00000
 80045dc:	43400000 	.word	0x43400000
 80045e0:	0003988e 	.word	0x0003988e
 80045e4:	000bb679 	.word	0x000bb679
 80045e8:	08004d10 	.word	0x08004d10
 80045ec:	3ff00000 	.word	0x3ff00000
 80045f0:	40080000 	.word	0x40080000
 80045f4:	08004cf0 	.word	0x08004cf0
 80045f8:	08004d00 	.word	0x08004d00
 80045fc:	460b      	mov	r3, r1
 80045fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004602:	e5d7      	b.n	80041b4 <__ieee754_pow+0x354>
 8004604:	f04f 0a01 	mov.w	sl, #1
 8004608:	e65e      	b.n	80042c8 <__ieee754_pow+0x468>
 800460a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80048dc <__ieee754_pow+0xa7c>)
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	4630      	mov	r0, r6
 8004612:	4639      	mov	r1, r7
 8004614:	f7fb fe32 	bl	800027c <__adddf3>
 8004618:	4642      	mov	r2, r8
 800461a:	e9cd 0100 	strd	r0, r1, [sp]
 800461e:	464b      	mov	r3, r9
 8004620:	4620      	mov	r0, r4
 8004622:	4629      	mov	r1, r5
 8004624:	f7fb fe28 	bl	8000278 <__aeabi_dsub>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004630:	f7fc fa6a 	bl	8000b08 <__aeabi_dcmpgt>
 8004634:	2800      	cmp	r0, #0
 8004636:	f47f ae00 	bne.w	800423a <__ieee754_pow+0x3da>
 800463a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800463e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004642:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8004646:	fa43 fa0a 	asr.w	sl, r3, sl
 800464a:	44da      	add	sl, fp
 800464c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004650:	489d      	ldr	r0, [pc, #628]	@ (80048c8 <__ieee754_pow+0xa68>)
 8004652:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8004656:	4108      	asrs	r0, r1
 8004658:	ea00 030a 	and.w	r3, r0, sl
 800465c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004660:	f1c1 0114 	rsb	r1, r1, #20
 8004664:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8004668:	fa4a fa01 	asr.w	sl, sl, r1
 800466c:	f1bb 0f00 	cmp.w	fp, #0
 8004670:	4640      	mov	r0, r8
 8004672:	4649      	mov	r1, r9
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	bfb8      	it	lt
 800467a:	f1ca 0a00 	rsblt	sl, sl, #0
 800467e:	f7fb fdfb 	bl	8000278 <__aeabi_dsub>
 8004682:	4680      	mov	r8, r0
 8004684:	4689      	mov	r9, r1
 8004686:	4632      	mov	r2, r6
 8004688:	463b      	mov	r3, r7
 800468a:	4640      	mov	r0, r8
 800468c:	4649      	mov	r1, r9
 800468e:	f7fb fdf5 	bl	800027c <__adddf3>
 8004692:	2400      	movs	r4, #0
 8004694:	a37c      	add	r3, pc, #496	@ (adr r3, 8004888 <__ieee754_pow+0xa28>)
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	4620      	mov	r0, r4
 800469c:	460d      	mov	r5, r1
 800469e:	f7fb ffa3 	bl	80005e8 <__aeabi_dmul>
 80046a2:	4642      	mov	r2, r8
 80046a4:	e9cd 0100 	strd	r0, r1, [sp]
 80046a8:	464b      	mov	r3, r9
 80046aa:	4620      	mov	r0, r4
 80046ac:	4629      	mov	r1, r5
 80046ae:	f7fb fde3 	bl	8000278 <__aeabi_dsub>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4630      	mov	r0, r6
 80046b8:	4639      	mov	r1, r7
 80046ba:	f7fb fddd 	bl	8000278 <__aeabi_dsub>
 80046be:	a374      	add	r3, pc, #464	@ (adr r3, 8004890 <__ieee754_pow+0xa30>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f7fb ff90 	bl	80005e8 <__aeabi_dmul>
 80046c8:	a373      	add	r3, pc, #460	@ (adr r3, 8004898 <__ieee754_pow+0xa38>)
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	4680      	mov	r8, r0
 80046d0:	4689      	mov	r9, r1
 80046d2:	4620      	mov	r0, r4
 80046d4:	4629      	mov	r1, r5
 80046d6:	f7fb ff87 	bl	80005e8 <__aeabi_dmul>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4640      	mov	r0, r8
 80046e0:	4649      	mov	r1, r9
 80046e2:	f7fb fdcb 	bl	800027c <__adddf3>
 80046e6:	4604      	mov	r4, r0
 80046e8:	460d      	mov	r5, r1
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046f2:	f7fb fdc3 	bl	800027c <__adddf3>
 80046f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80046fa:	4680      	mov	r8, r0
 80046fc:	4689      	mov	r9, r1
 80046fe:	f7fb fdbb 	bl	8000278 <__aeabi_dsub>
 8004702:	4602      	mov	r2, r0
 8004704:	460b      	mov	r3, r1
 8004706:	4620      	mov	r0, r4
 8004708:	4629      	mov	r1, r5
 800470a:	f7fb fdb5 	bl	8000278 <__aeabi_dsub>
 800470e:	4642      	mov	r2, r8
 8004710:	4606      	mov	r6, r0
 8004712:	460f      	mov	r7, r1
 8004714:	464b      	mov	r3, r9
 8004716:	4640      	mov	r0, r8
 8004718:	4649      	mov	r1, r9
 800471a:	f7fb ff65 	bl	80005e8 <__aeabi_dmul>
 800471e:	a360      	add	r3, pc, #384	@ (adr r3, 80048a0 <__ieee754_pow+0xa40>)
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	4604      	mov	r4, r0
 8004726:	460d      	mov	r5, r1
 8004728:	f7fb ff5e 	bl	80005e8 <__aeabi_dmul>
 800472c:	a35e      	add	r3, pc, #376	@ (adr r3, 80048a8 <__ieee754_pow+0xa48>)
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f7fb fda1 	bl	8000278 <__aeabi_dsub>
 8004736:	4622      	mov	r2, r4
 8004738:	462b      	mov	r3, r5
 800473a:	f7fb ff55 	bl	80005e8 <__aeabi_dmul>
 800473e:	a35c      	add	r3, pc, #368	@ (adr r3, 80048b0 <__ieee754_pow+0xa50>)
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	f7fb fd9a 	bl	800027c <__adddf3>
 8004748:	4622      	mov	r2, r4
 800474a:	462b      	mov	r3, r5
 800474c:	f7fb ff4c 	bl	80005e8 <__aeabi_dmul>
 8004750:	a359      	add	r3, pc, #356	@ (adr r3, 80048b8 <__ieee754_pow+0xa58>)
 8004752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004756:	f7fb fd8f 	bl	8000278 <__aeabi_dsub>
 800475a:	4622      	mov	r2, r4
 800475c:	462b      	mov	r3, r5
 800475e:	f7fb ff43 	bl	80005e8 <__aeabi_dmul>
 8004762:	a357      	add	r3, pc, #348	@ (adr r3, 80048c0 <__ieee754_pow+0xa60>)
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f7fb fd88 	bl	800027c <__adddf3>
 800476c:	4622      	mov	r2, r4
 800476e:	462b      	mov	r3, r5
 8004770:	f7fb ff3a 	bl	80005e8 <__aeabi_dmul>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4640      	mov	r0, r8
 800477a:	4649      	mov	r1, r9
 800477c:	f7fb fd7c 	bl	8000278 <__aeabi_dsub>
 8004780:	4604      	mov	r4, r0
 8004782:	460d      	mov	r5, r1
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4640      	mov	r0, r8
 800478a:	4649      	mov	r1, r9
 800478c:	f7fb ff2c 	bl	80005e8 <__aeabi_dmul>
 8004790:	2200      	movs	r2, #0
 8004792:	e9cd 0100 	strd	r0, r1, [sp]
 8004796:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800479a:	4620      	mov	r0, r4
 800479c:	4629      	mov	r1, r5
 800479e:	f7fb fd6b 	bl	8000278 <__aeabi_dsub>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047aa:	f7fc f847 	bl	800083c <__aeabi_ddiv>
 80047ae:	4632      	mov	r2, r6
 80047b0:	4604      	mov	r4, r0
 80047b2:	460d      	mov	r5, r1
 80047b4:	463b      	mov	r3, r7
 80047b6:	4640      	mov	r0, r8
 80047b8:	4649      	mov	r1, r9
 80047ba:	f7fb ff15 	bl	80005e8 <__aeabi_dmul>
 80047be:	4632      	mov	r2, r6
 80047c0:	463b      	mov	r3, r7
 80047c2:	f7fb fd5b 	bl	800027c <__adddf3>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4620      	mov	r0, r4
 80047cc:	4629      	mov	r1, r5
 80047ce:	f7fb fd53 	bl	8000278 <__aeabi_dsub>
 80047d2:	4642      	mov	r2, r8
 80047d4:	464b      	mov	r3, r9
 80047d6:	f7fb fd4f 	bl	8000278 <__aeabi_dsub>
 80047da:	460b      	mov	r3, r1
 80047dc:	4602      	mov	r2, r0
 80047de:	493b      	ldr	r1, [pc, #236]	@ (80048cc <__ieee754_pow+0xa6c>)
 80047e0:	2000      	movs	r0, #0
 80047e2:	f7fb fd49 	bl	8000278 <__aeabi_dsub>
 80047e6:	ec41 0b10 	vmov	d0, r0, r1
 80047ea:	ee10 3a90 	vmov	r3, s1
 80047ee:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80047f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047f6:	da30      	bge.n	800485a <__ieee754_pow+0x9fa>
 80047f8:	4650      	mov	r0, sl
 80047fa:	f000 f87d 	bl	80048f8 <scalbn>
 80047fe:	ec51 0b10 	vmov	r0, r1, d0
 8004802:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004806:	f7ff bbd2 	b.w	8003fae <__ieee754_pow+0x14e>
 800480a:	4c31      	ldr	r4, [pc, #196]	@ (80048d0 <__ieee754_pow+0xa70>)
 800480c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004810:	42a3      	cmp	r3, r4
 8004812:	d91a      	bls.n	800484a <__ieee754_pow+0x9ea>
 8004814:	4b2f      	ldr	r3, [pc, #188]	@ (80048d4 <__ieee754_pow+0xa74>)
 8004816:	440b      	add	r3, r1
 8004818:	4303      	orrs	r3, r0
 800481a:	d009      	beq.n	8004830 <__ieee754_pow+0x9d0>
 800481c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004820:	2200      	movs	r2, #0
 8004822:	2300      	movs	r3, #0
 8004824:	f7fc f952 	bl	8000acc <__aeabi_dcmplt>
 8004828:	3800      	subs	r0, #0
 800482a:	bf18      	it	ne
 800482c:	2001      	movne	r0, #1
 800482e:	e42b      	b.n	8004088 <__ieee754_pow+0x228>
 8004830:	4642      	mov	r2, r8
 8004832:	464b      	mov	r3, r9
 8004834:	f7fb fd20 	bl	8000278 <__aeabi_dsub>
 8004838:	4632      	mov	r2, r6
 800483a:	463b      	mov	r3, r7
 800483c:	f7fc f95a 	bl	8000af4 <__aeabi_dcmpge>
 8004840:	2800      	cmp	r0, #0
 8004842:	d1eb      	bne.n	800481c <__ieee754_pow+0x9bc>
 8004844:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80048e4 <__ieee754_pow+0xa84>
 8004848:	e6f7      	b.n	800463a <__ieee754_pow+0x7da>
 800484a:	469a      	mov	sl, r3
 800484c:	4b22      	ldr	r3, [pc, #136]	@ (80048d8 <__ieee754_pow+0xa78>)
 800484e:	459a      	cmp	sl, r3
 8004850:	f63f aef3 	bhi.w	800463a <__ieee754_pow+0x7da>
 8004854:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004858:	e715      	b.n	8004686 <__ieee754_pow+0x826>
 800485a:	ec51 0b10 	vmov	r0, r1, d0
 800485e:	4619      	mov	r1, r3
 8004860:	e7cf      	b.n	8004802 <__ieee754_pow+0x9a2>
 8004862:	491a      	ldr	r1, [pc, #104]	@ (80048cc <__ieee754_pow+0xa6c>)
 8004864:	2000      	movs	r0, #0
 8004866:	f7ff bb18 	b.w	8003e9a <__ieee754_pow+0x3a>
 800486a:	2000      	movs	r0, #0
 800486c:	2100      	movs	r1, #0
 800486e:	f7ff bb14 	b.w	8003e9a <__ieee754_pow+0x3a>
 8004872:	4630      	mov	r0, r6
 8004874:	4639      	mov	r1, r7
 8004876:	f7ff bb10 	b.w	8003e9a <__ieee754_pow+0x3a>
 800487a:	460c      	mov	r4, r1
 800487c:	f7ff bb5e 	b.w	8003f3c <__ieee754_pow+0xdc>
 8004880:	2400      	movs	r4, #0
 8004882:	f7ff bb49 	b.w	8003f18 <__ieee754_pow+0xb8>
 8004886:	bf00      	nop
 8004888:	00000000 	.word	0x00000000
 800488c:	3fe62e43 	.word	0x3fe62e43
 8004890:	fefa39ef 	.word	0xfefa39ef
 8004894:	3fe62e42 	.word	0x3fe62e42
 8004898:	0ca86c39 	.word	0x0ca86c39
 800489c:	be205c61 	.word	0xbe205c61
 80048a0:	72bea4d0 	.word	0x72bea4d0
 80048a4:	3e663769 	.word	0x3e663769
 80048a8:	c5d26bf1 	.word	0xc5d26bf1
 80048ac:	3ebbbd41 	.word	0x3ebbbd41
 80048b0:	af25de2c 	.word	0xaf25de2c
 80048b4:	3f11566a 	.word	0x3f11566a
 80048b8:	16bebd93 	.word	0x16bebd93
 80048bc:	3f66c16c 	.word	0x3f66c16c
 80048c0:	5555553e 	.word	0x5555553e
 80048c4:	3fc55555 	.word	0x3fc55555
 80048c8:	fff00000 	.word	0xfff00000
 80048cc:	3ff00000 	.word	0x3ff00000
 80048d0:	4090cbff 	.word	0x4090cbff
 80048d4:	3f6f3400 	.word	0x3f6f3400
 80048d8:	3fe00000 	.word	0x3fe00000
 80048dc:	652b82fe 	.word	0x652b82fe
 80048e0:	3c971547 	.word	0x3c971547
 80048e4:	4090cc00 	.word	0x4090cc00

080048e8 <fabs>:
 80048e8:	ec51 0b10 	vmov	r0, r1, d0
 80048ec:	4602      	mov	r2, r0
 80048ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80048f2:	ec43 2b10 	vmov	d0, r2, r3
 80048f6:	4770      	bx	lr

080048f8 <scalbn>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	ec55 4b10 	vmov	r4, r5, d0
 80048fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004902:	4606      	mov	r6, r0
 8004904:	462b      	mov	r3, r5
 8004906:	b991      	cbnz	r1, 800492e <scalbn+0x36>
 8004908:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800490c:	4323      	orrs	r3, r4
 800490e:	d03d      	beq.n	800498c <scalbn+0x94>
 8004910:	4b35      	ldr	r3, [pc, #212]	@ (80049e8 <scalbn+0xf0>)
 8004912:	4620      	mov	r0, r4
 8004914:	4629      	mov	r1, r5
 8004916:	2200      	movs	r2, #0
 8004918:	f7fb fe66 	bl	80005e8 <__aeabi_dmul>
 800491c:	4b33      	ldr	r3, [pc, #204]	@ (80049ec <scalbn+0xf4>)
 800491e:	429e      	cmp	r6, r3
 8004920:	4604      	mov	r4, r0
 8004922:	460d      	mov	r5, r1
 8004924:	da0f      	bge.n	8004946 <scalbn+0x4e>
 8004926:	a328      	add	r3, pc, #160	@ (adr r3, 80049c8 <scalbn+0xd0>)
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	e01e      	b.n	800496c <scalbn+0x74>
 800492e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004932:	4291      	cmp	r1, r2
 8004934:	d10b      	bne.n	800494e <scalbn+0x56>
 8004936:	4622      	mov	r2, r4
 8004938:	4620      	mov	r0, r4
 800493a:	4629      	mov	r1, r5
 800493c:	f7fb fc9e 	bl	800027c <__adddf3>
 8004940:	4604      	mov	r4, r0
 8004942:	460d      	mov	r5, r1
 8004944:	e022      	b.n	800498c <scalbn+0x94>
 8004946:	460b      	mov	r3, r1
 8004948:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800494c:	3936      	subs	r1, #54	@ 0x36
 800494e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8004952:	4296      	cmp	r6, r2
 8004954:	dd0d      	ble.n	8004972 <scalbn+0x7a>
 8004956:	2d00      	cmp	r5, #0
 8004958:	a11d      	add	r1, pc, #116	@ (adr r1, 80049d0 <scalbn+0xd8>)
 800495a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800495e:	da02      	bge.n	8004966 <scalbn+0x6e>
 8004960:	a11d      	add	r1, pc, #116	@ (adr r1, 80049d8 <scalbn+0xe0>)
 8004962:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004966:	a31a      	add	r3, pc, #104	@ (adr r3, 80049d0 <scalbn+0xd8>)
 8004968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496c:	f7fb fe3c 	bl	80005e8 <__aeabi_dmul>
 8004970:	e7e6      	b.n	8004940 <scalbn+0x48>
 8004972:	1872      	adds	r2, r6, r1
 8004974:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004978:	428a      	cmp	r2, r1
 800497a:	dcec      	bgt.n	8004956 <scalbn+0x5e>
 800497c:	2a00      	cmp	r2, #0
 800497e:	dd08      	ble.n	8004992 <scalbn+0x9a>
 8004980:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004984:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004988:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800498c:	ec45 4b10 	vmov	d0, r4, r5
 8004990:	bd70      	pop	{r4, r5, r6, pc}
 8004992:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004996:	da08      	bge.n	80049aa <scalbn+0xb2>
 8004998:	2d00      	cmp	r5, #0
 800499a:	a10b      	add	r1, pc, #44	@ (adr r1, 80049c8 <scalbn+0xd0>)
 800499c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049a0:	dac1      	bge.n	8004926 <scalbn+0x2e>
 80049a2:	a10f      	add	r1, pc, #60	@ (adr r1, 80049e0 <scalbn+0xe8>)
 80049a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049a8:	e7bd      	b.n	8004926 <scalbn+0x2e>
 80049aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80049ae:	3236      	adds	r2, #54	@ 0x36
 80049b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80049b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80049b8:	4620      	mov	r0, r4
 80049ba:	4b0d      	ldr	r3, [pc, #52]	@ (80049f0 <scalbn+0xf8>)
 80049bc:	4629      	mov	r1, r5
 80049be:	2200      	movs	r2, #0
 80049c0:	e7d4      	b.n	800496c <scalbn+0x74>
 80049c2:	bf00      	nop
 80049c4:	f3af 8000 	nop.w
 80049c8:	c2f8f359 	.word	0xc2f8f359
 80049cc:	01a56e1f 	.word	0x01a56e1f
 80049d0:	8800759c 	.word	0x8800759c
 80049d4:	7e37e43c 	.word	0x7e37e43c
 80049d8:	8800759c 	.word	0x8800759c
 80049dc:	fe37e43c 	.word	0xfe37e43c
 80049e0:	c2f8f359 	.word	0xc2f8f359
 80049e4:	81a56e1f 	.word	0x81a56e1f
 80049e8:	43500000 	.word	0x43500000
 80049ec:	ffff3cb0 	.word	0xffff3cb0
 80049f0:	3c900000 	.word	0x3c900000

080049f4 <with_errno>:
 80049f4:	b510      	push	{r4, lr}
 80049f6:	ed2d 8b02 	vpush	{d8}
 80049fa:	eeb0 8a40 	vmov.f32	s16, s0
 80049fe:	eef0 8a60 	vmov.f32	s17, s1
 8004a02:	4604      	mov	r4, r0
 8004a04:	f7fe fd36 	bl	8003474 <__errno>
 8004a08:	eeb0 0a48 	vmov.f32	s0, s16
 8004a0c:	eef0 0a68 	vmov.f32	s1, s17
 8004a10:	ecbd 8b02 	vpop	{d8}
 8004a14:	6004      	str	r4, [r0, #0]
 8004a16:	bd10      	pop	{r4, pc}

08004a18 <xflow>:
 8004a18:	4603      	mov	r3, r0
 8004a1a:	b507      	push	{r0, r1, r2, lr}
 8004a1c:	ec51 0b10 	vmov	r0, r1, d0
 8004a20:	b183      	cbz	r3, 8004a44 <xflow+0x2c>
 8004a22:	4602      	mov	r2, r0
 8004a24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004a28:	e9cd 2300 	strd	r2, r3, [sp]
 8004a2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a30:	f7fb fdda 	bl	80005e8 <__aeabi_dmul>
 8004a34:	ec41 0b10 	vmov	d0, r0, r1
 8004a38:	2022      	movs	r0, #34	@ 0x22
 8004a3a:	b003      	add	sp, #12
 8004a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a40:	f7ff bfd8 	b.w	80049f4 <with_errno>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	e7ee      	b.n	8004a28 <xflow+0x10>
 8004a4a:	0000      	movs	r0, r0
 8004a4c:	0000      	movs	r0, r0
	...

08004a50 <__math_uflow>:
 8004a50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004a58 <__math_uflow+0x8>
 8004a54:	f7ff bfe0 	b.w	8004a18 <xflow>
 8004a58:	00000000 	.word	0x00000000
 8004a5c:	10000000 	.word	0x10000000

08004a60 <__math_oflow>:
 8004a60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8004a68 <__math_oflow+0x8>
 8004a64:	f7ff bfd8 	b.w	8004a18 <xflow>
 8004a68:	00000000 	.word	0x00000000
 8004a6c:	70000000 	.word	0x70000000

08004a70 <__ieee754_sqrt>:
 8004a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a74:	4a68      	ldr	r2, [pc, #416]	@ (8004c18 <__ieee754_sqrt+0x1a8>)
 8004a76:	ec55 4b10 	vmov	r4, r5, d0
 8004a7a:	43aa      	bics	r2, r5
 8004a7c:	462b      	mov	r3, r5
 8004a7e:	4621      	mov	r1, r4
 8004a80:	d110      	bne.n	8004aa4 <__ieee754_sqrt+0x34>
 8004a82:	4622      	mov	r2, r4
 8004a84:	4620      	mov	r0, r4
 8004a86:	4629      	mov	r1, r5
 8004a88:	f7fb fdae 	bl	80005e8 <__aeabi_dmul>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4620      	mov	r0, r4
 8004a92:	4629      	mov	r1, r5
 8004a94:	f7fb fbf2 	bl	800027c <__adddf3>
 8004a98:	4604      	mov	r4, r0
 8004a9a:	460d      	mov	r5, r1
 8004a9c:	ec45 4b10 	vmov	d0, r4, r5
 8004aa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa4:	2d00      	cmp	r5, #0
 8004aa6:	dc0e      	bgt.n	8004ac6 <__ieee754_sqrt+0x56>
 8004aa8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004aac:	4322      	orrs	r2, r4
 8004aae:	d0f5      	beq.n	8004a9c <__ieee754_sqrt+0x2c>
 8004ab0:	b19d      	cbz	r5, 8004ada <__ieee754_sqrt+0x6a>
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	f7fb fbde 	bl	8000278 <__aeabi_dsub>
 8004abc:	4602      	mov	r2, r0
 8004abe:	460b      	mov	r3, r1
 8004ac0:	f7fb febc 	bl	800083c <__aeabi_ddiv>
 8004ac4:	e7e8      	b.n	8004a98 <__ieee754_sqrt+0x28>
 8004ac6:	152a      	asrs	r2, r5, #20
 8004ac8:	d115      	bne.n	8004af6 <__ieee754_sqrt+0x86>
 8004aca:	2000      	movs	r0, #0
 8004acc:	e009      	b.n	8004ae2 <__ieee754_sqrt+0x72>
 8004ace:	0acb      	lsrs	r3, r1, #11
 8004ad0:	3a15      	subs	r2, #21
 8004ad2:	0549      	lsls	r1, r1, #21
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0fa      	beq.n	8004ace <__ieee754_sqrt+0x5e>
 8004ad8:	e7f7      	b.n	8004aca <__ieee754_sqrt+0x5a>
 8004ada:	462a      	mov	r2, r5
 8004adc:	e7fa      	b.n	8004ad4 <__ieee754_sqrt+0x64>
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	02dc      	lsls	r4, r3, #11
 8004ae4:	d5fb      	bpl.n	8004ade <__ieee754_sqrt+0x6e>
 8004ae6:	1e44      	subs	r4, r0, #1
 8004ae8:	1b12      	subs	r2, r2, r4
 8004aea:	f1c0 0420 	rsb	r4, r0, #32
 8004aee:	fa21 f404 	lsr.w	r4, r1, r4
 8004af2:	4323      	orrs	r3, r4
 8004af4:	4081      	lsls	r1, r0
 8004af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004afa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8004afe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b02:	07d2      	lsls	r2, r2, #31
 8004b04:	bf5c      	itt	pl
 8004b06:	005b      	lslpl	r3, r3, #1
 8004b08:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8004b0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b10:	bf58      	it	pl
 8004b12:	0049      	lslpl	r1, r1, #1
 8004b14:	2600      	movs	r6, #0
 8004b16:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004b1a:	106d      	asrs	r5, r5, #1
 8004b1c:	0049      	lsls	r1, r1, #1
 8004b1e:	2016      	movs	r0, #22
 8004b20:	4632      	mov	r2, r6
 8004b22:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004b26:	1917      	adds	r7, r2, r4
 8004b28:	429f      	cmp	r7, r3
 8004b2a:	bfde      	ittt	le
 8004b2c:	193a      	addle	r2, r7, r4
 8004b2e:	1bdb      	suble	r3, r3, r7
 8004b30:	1936      	addle	r6, r6, r4
 8004b32:	0fcf      	lsrs	r7, r1, #31
 8004b34:	3801      	subs	r0, #1
 8004b36:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004b3a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004b3e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004b42:	d1f0      	bne.n	8004b26 <__ieee754_sqrt+0xb6>
 8004b44:	4604      	mov	r4, r0
 8004b46:	2720      	movs	r7, #32
 8004b48:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	eb00 0e0c 	add.w	lr, r0, ip
 8004b52:	db02      	blt.n	8004b5a <__ieee754_sqrt+0xea>
 8004b54:	d113      	bne.n	8004b7e <__ieee754_sqrt+0x10e>
 8004b56:	458e      	cmp	lr, r1
 8004b58:	d811      	bhi.n	8004b7e <__ieee754_sqrt+0x10e>
 8004b5a:	f1be 0f00 	cmp.w	lr, #0
 8004b5e:	eb0e 000c 	add.w	r0, lr, ip
 8004b62:	da42      	bge.n	8004bea <__ieee754_sqrt+0x17a>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	db40      	blt.n	8004bea <__ieee754_sqrt+0x17a>
 8004b68:	f102 0801 	add.w	r8, r2, #1
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	458e      	cmp	lr, r1
 8004b70:	bf88      	it	hi
 8004b72:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004b76:	eba1 010e 	sub.w	r1, r1, lr
 8004b7a:	4464      	add	r4, ip
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8004b82:	3f01      	subs	r7, #1
 8004b84:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004b88:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004b8c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004b90:	d1dc      	bne.n	8004b4c <__ieee754_sqrt+0xdc>
 8004b92:	4319      	orrs	r1, r3
 8004b94:	d01b      	beq.n	8004bce <__ieee754_sqrt+0x15e>
 8004b96:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004c1c <__ieee754_sqrt+0x1ac>
 8004b9a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004c20 <__ieee754_sqrt+0x1b0>
 8004b9e:	e9da 0100 	ldrd	r0, r1, [sl]
 8004ba2:	e9db 2300 	ldrd	r2, r3, [fp]
 8004ba6:	f7fb fb67 	bl	8000278 <__aeabi_dsub>
 8004baa:	e9da 8900 	ldrd	r8, r9, [sl]
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	f7fb ff93 	bl	8000ae0 <__aeabi_dcmple>
 8004bba:	b140      	cbz	r0, 8004bce <__ieee754_sqrt+0x15e>
 8004bbc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004bc0:	e9da 0100 	ldrd	r0, r1, [sl]
 8004bc4:	e9db 2300 	ldrd	r2, r3, [fp]
 8004bc8:	d111      	bne.n	8004bee <__ieee754_sqrt+0x17e>
 8004bca:	3601      	adds	r6, #1
 8004bcc:	463c      	mov	r4, r7
 8004bce:	1072      	asrs	r2, r6, #1
 8004bd0:	0863      	lsrs	r3, r4, #1
 8004bd2:	07f1      	lsls	r1, r6, #31
 8004bd4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004bd8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004bdc:	bf48      	it	mi
 8004bde:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004be2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004be6:	4618      	mov	r0, r3
 8004be8:	e756      	b.n	8004a98 <__ieee754_sqrt+0x28>
 8004bea:	4690      	mov	r8, r2
 8004bec:	e7be      	b.n	8004b6c <__ieee754_sqrt+0xfc>
 8004bee:	f7fb fb45 	bl	800027c <__adddf3>
 8004bf2:	e9da 8900 	ldrd	r8, r9, [sl]
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4640      	mov	r0, r8
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	f7fb ff65 	bl	8000acc <__aeabi_dcmplt>
 8004c02:	b120      	cbz	r0, 8004c0e <__ieee754_sqrt+0x19e>
 8004c04:	1ca0      	adds	r0, r4, #2
 8004c06:	bf08      	it	eq
 8004c08:	3601      	addeq	r6, #1
 8004c0a:	3402      	adds	r4, #2
 8004c0c:	e7df      	b.n	8004bce <__ieee754_sqrt+0x15e>
 8004c0e:	1c63      	adds	r3, r4, #1
 8004c10:	f023 0401 	bic.w	r4, r3, #1
 8004c14:	e7db      	b.n	8004bce <__ieee754_sqrt+0x15e>
 8004c16:	bf00      	nop
 8004c18:	7ff00000 	.word	0x7ff00000
 8004c1c:	20000060 	.word	0x20000060
 8004c20:	20000058 	.word	0x20000058

08004c24 <_init>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	bf00      	nop
 8004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c2a:	bc08      	pop	{r3}
 8004c2c:	469e      	mov	lr, r3
 8004c2e:	4770      	bx	lr

08004c30 <_fini>:
 8004c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c32:	bf00      	nop
 8004c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c36:	bc08      	pop	{r3}
 8004c38:	469e      	mov	lr, r3
 8004c3a:	4770      	bx	lr
